
smart_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080060b8  080060b8  000160b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800613c  0800613c  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800613c  0800613c  0001613c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006144  08006144  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006144  08006144  00016144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006148  08006148  00016148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800614c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  200000b4  08006200  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08006200  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014296  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002554  00000000  00000000  0003437a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  000368d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  000378a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002095f  00000000  00000000  00038788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120d8  00000000  00000000  000590e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9f4b  00000000  00000000  0006b1bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013510a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004704  00000000  00000000  00135160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b4 	.word	0x200000b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060a0 	.word	0x080060a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	080060a0 	.word	0x080060a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <custom_delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void custom_delay(int sec){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

	int i = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < sec / 10; i++ ){
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	e041      	b.n	8000dea <custom_delay+0x96>
		//HAL_Delay(1);

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d70:	f001 f8d0 	bl	8001f14 <HAL_GPIO_WritePin>

		__HAL_TIM_SET_COUNTER( &htim1, 0 );
 8000d74:	4b24      	ldr	r3, [pc, #144]	; (8000e08 <custom_delay+0xb4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	625a      	str	r2, [r3, #36]	; 0x24
		while( __HAL_TIM_GET_COUNTER(&htim1) < 10 );
 8000d7c:	bf00      	nop
 8000d7e:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <custom_delay+0xb4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d84:	2b09      	cmp	r3, #9
 8000d86:	d9fa      	bls.n	8000d7e <custom_delay+0x2a>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d92:	f001 f8bf 	bl	8001f14 <HAL_GPIO_WritePin>

		HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d96:	2100      	movs	r1, #0
 8000d98:	481b      	ldr	r0, [pc, #108]	; (8000e08 <custom_delay+0xb4>)
 8000d9a:	f002 fb79 	bl	8003490 <HAL_TIM_IC_Start_IT>


		__HAL_TIM_SET_COUNTER( &htim1, 0 );
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <custom_delay+0xb4>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24
		while( __HAL_TIM_GET_COUNTER(&htim1) < 100 );
 8000da6:	bf00      	nop
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <custom_delay+0xb4>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dae:	2b63      	cmp	r3, #99	; 0x63
 8000db0:	d9fa      	bls.n	8000da8 <custom_delay+0x54>

		if (distance < 20){
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <custom_delay+0xb8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b13      	cmp	r3, #19
 8000db8:	dc0c      	bgt.n	8000dd4 <custom_delay+0x80>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2108      	movs	r1, #8
 8000dbe:	4814      	ldr	r0, [pc, #80]	; (8000e10 <custom_delay+0xbc>)
 8000dc0:	f001 f8a8 	bl	8001f14 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, &stop, 4, HAL_MAX_DELAY);
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc8:	2204      	movs	r2, #4
 8000dca:	4912      	ldr	r1, [pc, #72]	; (8000e14 <custom_delay+0xc0>)
 8000dcc:	4812      	ldr	r0, [pc, #72]	; (8000e18 <custom_delay+0xc4>)
 8000dce:	f003 fa89 	bl	80042e4 <HAL_UART_Transmit>
 8000dd2:	e004      	b.n	8000dde <custom_delay+0x8a>
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2108      	movs	r1, #8
 8000dd8:	480d      	ldr	r0, [pc, #52]	; (8000e10 <custom_delay+0xbc>)
 8000dda:	f001 f89b 	bl	8001f14 <HAL_GPIO_WritePin>
		}

		HAL_Delay(10);
 8000dde:	200a      	movs	r0, #10
 8000de0:	f000 fd7a 	bl	80018d8 <HAL_Delay>
	for (i = 0; i < sec / 10; i++ ){
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	3301      	adds	r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <custom_delay+0xc8>)
 8000dee:	fb82 1203 	smull	r1, r2, r2, r3
 8000df2:	1092      	asrs	r2, r2, #2
 8000df4:	17db      	asrs	r3, r3, #31
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbb3      	blt.n	8000d66 <custom_delay+0x12>
	}

}
 8000dfe:	bf00      	nop
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	2000017c 	.word	0x2000017c
 8000e0c:	200000d4 	.word	0x200000d4
 8000e10:	48000400 	.word	0x48000400
 8000e14:	20000010 	.word	0x20000010
 8000e18:	200000ec 	.word	0x200000ec
 8000e1c:	66666667 	.word	0x66666667

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e26:	f000 fce2 	bl	80017ee <HAL_Init>

  /* USER CODE BEGIN Init */

  ps = ( 8000 / freq[0] ) + 1;
 8000e2a:	4b5d      	ldr	r3, [pc, #372]	; (8000fa0 <main+0x180>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000e32:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e36:	3301      	adds	r3, #1
 8000e38:	4a5a      	ldr	r2, [pc, #360]	; (8000fa4 <main+0x184>)
 8000e3a:	6013      	str	r3, [r2, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e3c:	f000 f8ce 	bl	8000fdc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e40:	f000 f9f8 	bl	8001234 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e44:	f000 f9c6 	bl	80011d4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000e48:	f000 f994 	bl	8001174 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000e4c:	f000 f91c 	bl	8001088 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000e50:	4855      	ldr	r0, [pc, #340]	; (8000fa8 <main+0x188>)
 8000e52:	f002 fa6f 	bl	8003334 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e60:	f001 f858 	bl	8001f14 <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COUNTER( &htim1, 0 );
 8000e64:	4b50      	ldr	r3, [pc, #320]	; (8000fa8 <main+0x188>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	; 0x24

  while( __HAL_TIM_GET_COUNTER(&htim1) < 10 );
 8000e6c:	bf00      	nop
 8000e6e:	4b4e      	ldr	r3, [pc, #312]	; (8000fa8 <main+0x188>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e74:	2b09      	cmp	r3, #9
 8000e76:	d9fa      	bls.n	8000e6e <main+0x4e>



//	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 49);
//	HAL_TIM_PWM_Start(&htim1,	TIM_CHANNEL_1);
	HAL_UART_Receive_IT( &huart2, buff, 4  );
 8000e78:	2204      	movs	r2, #4
 8000e7a:	494c      	ldr	r1, [pc, #304]	; (8000fac <main+0x18c>)
 8000e7c:	484c      	ldr	r0, [pc, #304]	; (8000fb0 <main+0x190>)
 8000e7e:	f003 fac5 	bl	800440c <HAL_UART_Receive_IT>

//	  ps = ( 8000 / 200 ) + 1;
//	HAL_TIM_PWM_Start(&htim1,	TIM_CHANNEL_1);
//	__HAL_TIM_SET_PRESCALER(&htim1, ps );

	if (flag){
 8000e82:	4b4c      	ldr	r3, [pc, #304]	; (8000fb4 <main+0x194>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 8081 	beq.w	8000f8e <main+0x16e>
		int move_distance = buff[1] - '0';
 8000e8c:	4b47      	ldr	r3, [pc, #284]	; (8000fac <main+0x18c>)
 8000e8e:	785b      	ldrb	r3, [r3, #1]
 8000e90:	3b30      	subs	r3, #48	; 0x30
 8000e92:	607b      	str	r3, [r7, #4]
		if (move_distance > 0 && move_distance <= 5 ){
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	dd67      	ble.n	8000f6a <main+0x14a>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b05      	cmp	r3, #5
 8000e9e:	dc64      	bgt.n	8000f6a <main+0x14a>
			if (buff[0] == 'F'){
 8000ea0:	4b42      	ldr	r3, [pc, #264]	; (8000fac <main+0x18c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b46      	cmp	r3, #70	; 0x46
 8000ea6:	d10f      	bne.n	8000ec8 <main+0xa8>
//				ps = ( 8000 / 200 ) + 1;
//				HAL_TIM_PWM_Start(&htim1,	TIM_CHANNEL_1);
//				__HAL_TIM_SET_PRESCALER(&htim1, ps );

				HAL_UART_Transmit(&huart1, &fwd, 4, HAL_MAX_DELAY);
 8000ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eac:	2204      	movs	r2, #4
 8000eae:	4942      	ldr	r1, [pc, #264]	; (8000fb8 <main+0x198>)
 8000eb0:	4842      	ldr	r0, [pc, #264]	; (8000fbc <main+0x19c>)
 8000eb2:	f003 fa17 	bl	80042e4 <HAL_UART_Transmit>
				custom_delay(move_distance  * 1900);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f240 726c 	movw	r2, #1900	; 0x76c
 8000ebc:	fb02 f303 	mul.w	r3, r2, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff47 	bl	8000d54 <custom_delay>
 8000ec6:	e050      	b.n	8000f6a <main+0x14a>

//				HAL_TIM_PWM_Stop(&htim1,	TIM_CHANNEL_1);

			}else if (buff[0] == 'B'){
 8000ec8:	4b38      	ldr	r3, [pc, #224]	; (8000fac <main+0x18c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b42      	cmp	r3, #66	; 0x42
 8000ece:	d10f      	bne.n	8000ef0 <main+0xd0>
//				ps = ( 8000 / 250 ) + 1;
//				HAL_TIM_PWM_Start(&htim1,	TIM_CHANNEL_1);
//				__HAL_TIM_SET_PRESCALER(&htim1, ps );


				HAL_UART_Transmit(&huart1, &bwd, 4, HAL_MAX_DELAY);
 8000ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	493a      	ldr	r1, [pc, #232]	; (8000fc0 <main+0x1a0>)
 8000ed8:	4838      	ldr	r0, [pc, #224]	; (8000fbc <main+0x19c>)
 8000eda:	f003 fa03 	bl	80042e4 <HAL_UART_Transmit>
				custom_delay(move_distance  * 1900);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f240 726c 	movw	r2, #1900	; 0x76c
 8000ee4:	fb02 f303 	mul.w	r3, r2, r3
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff33 	bl	8000d54 <custom_delay>
 8000eee:	e03c      	b.n	8000f6a <main+0x14a>

//				HAL_TIM_PWM_Stop(&htim1,	TIM_CHANNEL_1);
			}else if (buff[0] == 'R'){
 8000ef0:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <main+0x18c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b52      	cmp	r3, #82	; 0x52
 8000ef6:	d11a      	bne.n	8000f2e <main+0x10e>

//				ps = ( 8000 / 300 ) + 1;
//				HAL_TIM_PWM_Start(&htim1,	TIM_CHANNEL_1);
//				__HAL_TIM_SET_PRESCALER(&htim1, ps );

				HAL_UART_Transmit(&huart1, &right, 4, HAL_MAX_DELAY);
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8000efc:	2204      	movs	r2, #4
 8000efe:	4931      	ldr	r1, [pc, #196]	; (8000fc4 <main+0x1a4>)
 8000f00:	482e      	ldr	r0, [pc, #184]	; (8000fbc <main+0x19c>)
 8000f02:	f003 f9ef 	bl	80042e4 <HAL_UART_Transmit>
				HAL_Delay(820);
 8000f06:	f44f 704d 	mov.w	r0, #820	; 0x334
 8000f0a:	f000 fce5 	bl	80018d8 <HAL_Delay>
				HAL_UART_Transmit(&huart1, &fwd, 4, HAL_MAX_DELAY);
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	2204      	movs	r2, #4
 8000f14:	4928      	ldr	r1, [pc, #160]	; (8000fb8 <main+0x198>)
 8000f16:	4829      	ldr	r0, [pc, #164]	; (8000fbc <main+0x19c>)
 8000f18:	f003 f9e4 	bl	80042e4 <HAL_UART_Transmit>
				custom_delay(move_distance  * 1900);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f240 726c 	movw	r2, #1900	; 0x76c
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff14 	bl	8000d54 <custom_delay>
 8000f2c:	e01d      	b.n	8000f6a <main+0x14a>

//				HAL_TIM_PWM_Stop(&htim1,	TIM_CHANNEL_1);
			}else if (buff[0] == 'L'){
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <main+0x18c>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b4c      	cmp	r3, #76	; 0x4c
 8000f34:	d119      	bne.n	8000f6a <main+0x14a>

//				ps = ( 8000 / 350 ) + 1;
//				HAL_TIM_PWM_Start(&htim1,	TIM_CHANNEL_1);
//				__HAL_TIM_SET_PRESCALER(&htim1, ps );

				HAL_UART_Transmit(&huart1, &left, 4, HAL_MAX_DELAY);
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	2204      	movs	r2, #4
 8000f3c:	4922      	ldr	r1, [pc, #136]	; (8000fc8 <main+0x1a8>)
 8000f3e:	481f      	ldr	r0, [pc, #124]	; (8000fbc <main+0x19c>)
 8000f40:	f003 f9d0 	bl	80042e4 <HAL_UART_Transmit>
				HAL_Delay(820);
 8000f44:	f44f 704d 	mov.w	r0, #820	; 0x334
 8000f48:	f000 fcc6 	bl	80018d8 <HAL_Delay>
				HAL_UART_Transmit(&huart1, &fwd, 4, HAL_MAX_DELAY);
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f50:	2204      	movs	r2, #4
 8000f52:	4919      	ldr	r1, [pc, #100]	; (8000fb8 <main+0x198>)
 8000f54:	4819      	ldr	r0, [pc, #100]	; (8000fbc <main+0x19c>)
 8000f56:	f003 f9c5 	bl	80042e4 <HAL_UART_Transmit>
				custom_delay(move_distance  * 1900);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f240 726c 	movw	r2, #1900	; 0x76c
 8000f60:	fb02 f303 	mul.w	r3, r2, r3
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fef5 	bl	8000d54 <custom_delay>

//				HAL_TIM_PWM_Stop(&htim1,	TIM_CHANNEL_1);
			}
		}

		flag = 0;
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <main+0x194>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
		memset(buff, 0, 4);
 8000f70:	2204      	movs	r2, #4
 8000f72:	2100      	movs	r1, #0
 8000f74:	480d      	ldr	r0, [pc, #52]	; (8000fac <main+0x18c>)
 8000f76:	f004 fc5d 	bl	8005834 <memset>
		HAL_UART_Transmit(&huart1, &stop, 4, HAL_MAX_DELAY);
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	2204      	movs	r2, #4
 8000f80:	4912      	ldr	r1, [pc, #72]	; (8000fcc <main+0x1ac>)
 8000f82:	480e      	ldr	r0, [pc, #56]	; (8000fbc <main+0x19c>)
 8000f84:	f003 f9ae 	bl	80042e4 <HAL_UART_Transmit>
		HAL_Delay(100);
 8000f88:	2064      	movs	r0, #100	; 0x64
 8000f8a:	f000 fca5 	bl	80018d8 <HAL_Delay>
//
//	__HAL_TIM_SET_COUNTER( &htim1, 0 );
//	while( __HAL_TIM_GET_COUNTER(&htim1) < 100 );


	sprintf( print_distance, "%d \r\n", distance );
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <main+0x1b0>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	490f      	ldr	r1, [pc, #60]	; (8000fd4 <main+0x1b4>)
 8000f96:	4810      	ldr	r0, [pc, #64]	; (8000fd8 <main+0x1b8>)
 8000f98:	f004 fc54 	bl	8005844 <siprintf>
  {
 8000f9c:	e771      	b.n	8000e82 <main+0x62>
 8000f9e:	bf00      	nop
 8000fa0:	20000014 	.word	0x20000014
 8000fa4:	200000e4 	.word	0x200000e4
 8000fa8:	2000017c 	.word	0x2000017c
 8000fac:	200000e8 	.word	0x200000e8
 8000fb0:	200001c8 	.word	0x200001c8
 8000fb4:	200000d0 	.word	0x200000d0
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	200000ec 	.word	0x200000ec
 8000fc0:	20000004 	.word	0x20000004
 8000fc4:	2000000c 	.word	0x2000000c
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000010 	.word	0x20000010
 8000fd0:	200000d4 	.word	0x200000d4
 8000fd4:	080060b8 	.word	0x080060b8
 8000fd8:	20000170 	.word	0x20000170

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b096      	sub	sp, #88	; 0x58
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	2244      	movs	r2, #68	; 0x44
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f004 fc22 	bl	8005834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ffe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001002:	f000 ffbd 	bl	8001f80 <HAL_PWREx_ControlVoltageScaling>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800100c:	f000 f98e 	bl	800132c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001010:	f000 ff98 	bl	8001f44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <SystemClock_Config+0xa8>)
 8001016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800101a:	4a1a      	ldr	r2, [pc, #104]	; (8001084 <SystemClock_Config+0xa8>)
 800101c:	f023 0318 	bic.w	r3, r3, #24
 8001020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001024:	2314      	movs	r3, #20
 8001026:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001028:	2301      	movs	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800102c:	2301      	movs	r3, #1
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001034:	2370      	movs	r3, #112	; 0x70
 8001036:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001038:	2300      	movs	r3, #0
 800103a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fff3 	bl	800202c <HAL_RCC_OscConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800104c:	f000 f96e 	bl	800132c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001050:	230f      	movs	r3, #15
 8001052:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001064:	463b      	mov	r3, r7
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f001 fbf1 	bl	8002850 <HAL_RCC_ClockConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001074:	f000 f95a 	bl	800132c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001078:	f002 f802 	bl	8003080 <HAL_RCCEx_EnableMSIPLLMode>
}
 800107c:	bf00      	nop
 800107e:	3758      	adds	r7, #88	; 0x58
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40021000 	.word	0x40021000

08001088 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800108e:	f107 0320 	add.w	r3, r7, #32
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010b4:	4b2d      	ldr	r3, [pc, #180]	; (800116c <MX_TIM1_Init+0xe4>)
 80010b6:	4a2e      	ldr	r2, [pc, #184]	; (8001170 <MX_TIM1_Init+0xe8>)
 80010b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 80010ba:	4b2c      	ldr	r3, [pc, #176]	; (800116c <MX_TIM1_Init+0xe4>)
 80010bc:	2207      	movs	r2, #7
 80010be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c0:	4b2a      	ldr	r3, [pc, #168]	; (800116c <MX_TIM1_Init+0xe4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80010c6:	4b29      	ldr	r3, [pc, #164]	; (800116c <MX_TIM1_Init+0xe4>)
 80010c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80010cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ce:	4b27      	ldr	r3, [pc, #156]	; (800116c <MX_TIM1_Init+0xe4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010d4:	4b25      	ldr	r3, [pc, #148]	; (800116c <MX_TIM1_Init+0xe4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010da:	4b24      	ldr	r3, [pc, #144]	; (800116c <MX_TIM1_Init+0xe4>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010e0:	4822      	ldr	r0, [pc, #136]	; (800116c <MX_TIM1_Init+0xe4>)
 80010e2:	f002 f8cf 	bl	8003284 <HAL_TIM_Base_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80010ec:	f000 f91e 	bl	800132c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010f6:	f107 0320 	add.w	r3, r7, #32
 80010fa:	4619      	mov	r1, r3
 80010fc:	481b      	ldr	r0, [pc, #108]	; (800116c <MX_TIM1_Init+0xe4>)
 80010fe:	f002 fcb0 	bl	8003a62 <HAL_TIM_ConfigClockSource>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001108:	f000 f910 	bl	800132c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800110c:	4817      	ldr	r0, [pc, #92]	; (800116c <MX_TIM1_Init+0xe4>)
 800110e:	f002 f95d 	bl	80033cc <HAL_TIM_IC_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001118:	f000 f908 	bl	800132c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4619      	mov	r1, r3
 800112e:	480f      	ldr	r0, [pc, #60]	; (800116c <MX_TIM1_Init+0xe4>)
 8001130:	f003 f806 	bl	8004140 <HAL_TIMEx_MasterConfigSynchronization>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800113a:	f000 f8f7 	bl	800132c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001142:	2301      	movs	r3, #1
 8001144:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2200      	movs	r2, #0
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_TIM1_Init+0xe4>)
 8001156:	f002 fbe8 	bl	800392a <HAL_TIM_IC_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001160:	f000 f8e4 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	3730      	adds	r7, #48	; 0x30
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	2000017c 	.word	0x2000017c
 8001170:	40012c00 	.word	0x40012c00

08001174 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_USART1_UART_Init+0x58>)
 800117a:	4a15      	ldr	r2, [pc, #84]	; (80011d0 <MX_USART1_UART_Init+0x5c>)
 800117c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <MX_USART1_UART_Init+0x58>)
 8001180:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001184:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_USART1_UART_Init+0x58>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_USART1_UART_Init+0x58>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_USART1_UART_Init+0x58>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_USART1_UART_Init+0x58>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <MX_USART1_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_USART1_UART_Init+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <MX_USART1_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_USART1_UART_Init+0x58>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_USART1_UART_Init+0x58>)
 80011b8:	f003 f846 	bl	8004248 <HAL_UART_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011c2:	f000 f8b3 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200000ec 	.word	0x200000ec
 80011d0:	40013800 	.word	0x40013800

080011d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_USART2_UART_Init+0x58>)
 80011da:	4a15      	ldr	r2, [pc, #84]	; (8001230 <MX_USART2_UART_Init+0x5c>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <MX_USART2_UART_Init+0x58>)
 80011e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_USART2_UART_Init+0x58>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_USART2_UART_Init+0x58>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_USART2_UART_Init+0x58>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_USART2_UART_Init+0x58>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <MX_USART2_UART_Init+0x58>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_USART2_UART_Init+0x58>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <MX_USART2_UART_Init+0x58>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_USART2_UART_Init+0x58>)
 8001212:	2200      	movs	r2, #0
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_USART2_UART_Init+0x58>)
 8001218:	f003 f816 	bl	8004248 <HAL_UART_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001222:	f000 f883 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200001c8 	.word	0x200001c8
 8001230:	40004400 	.word	0x40004400

08001234 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124a:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <MX_GPIO_Init+0xbc>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a28      	ldr	r2, [pc, #160]	; (80012f0 <MX_GPIO_Init+0xbc>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <MX_GPIO_Init+0xbc>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <MX_GPIO_Init+0xbc>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	4a22      	ldr	r2, [pc, #136]	; (80012f0 <MX_GPIO_Init+0xbc>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <MX_GPIO_Init+0xbc>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <MX_GPIO_Init+0xbc>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <MX_GPIO_Init+0xbc>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_GPIO_Init+0xbc>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129c:	f000 fe3a 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2108      	movs	r1, #8
 80012a4:	4813      	ldr	r0, [pc, #76]	; (80012f4 <MX_GPIO_Init+0xc0>)
 80012a6:	f000 fe35 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	4619      	mov	r1, r3
 80012c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c6:	f000 fcbb 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80012ca:	2308      	movs	r3, #8
 80012cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	4619      	mov	r1, r3
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_GPIO_Init+0xc0>)
 80012e2:	f000 fcad 	bl	8001c40 <HAL_GPIO_Init>

}
 80012e6:	bf00      	nop
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000
 80012f4:	48000400 	.word	0x48000400

080012f8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	if ( huart ==  &huart2 ){
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_UART_RxCpltCallback+0x28>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d107      	bne.n	8001318 <HAL_UART_RxCpltCallback+0x20>
		//HAL_GPIO_TogglePin( GPIOB, GPIO_PIN_3 );
		flag = 1;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_UART_RxCpltCallback+0x2c>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT( &huart2, buff, 4  );
 800130e:	2204      	movs	r2, #4
 8001310:	4905      	ldr	r1, [pc, #20]	; (8001328 <HAL_UART_RxCpltCallback+0x30>)
 8001312:	4803      	ldr	r0, [pc, #12]	; (8001320 <HAL_UART_RxCpltCallback+0x28>)
 8001314:	f003 f87a 	bl	800440c <HAL_UART_Receive_IT>
	}
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200001c8 	.word	0x200001c8
 8001324:	200000d0 	.word	0x200000d0
 8001328:	200000e8 	.word	0x200000e8

0800132c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
}
 8001332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001334:	e7fe      	b.n	8001334 <Error_Handler+0x8>
	...

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <HAL_MspInit+0x44>)
 8001340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001342:	4a0e      	ldr	r2, [pc, #56]	; (800137c <HAL_MspInit+0x44>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6613      	str	r3, [r2, #96]	; 0x60
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <HAL_MspInit+0x44>)
 800134c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_MspInit+0x44>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	4a08      	ldr	r2, [pc, #32]	; (800137c <HAL_MspInit+0x44>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001360:	6593      	str	r3, [r2, #88]	; 0x58
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_MspInit+0x44>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000

08001380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a28      	ldr	r2, [pc, #160]	; (8001440 <HAL_TIM_Base_MspInit+0xc0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d149      	bne.n	8001436 <HAL_TIM_Base_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013a2:	4b28      	ldr	r3, [pc, #160]	; (8001444 <HAL_TIM_Base_MspInit+0xc4>)
 80013a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a6:	4a27      	ldr	r2, [pc, #156]	; (8001444 <HAL_TIM_Base_MspInit+0xc4>)
 80013a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013ac:	6613      	str	r3, [r2, #96]	; 0x60
 80013ae:	4b25      	ldr	r3, [pc, #148]	; (8001444 <HAL_TIM_Base_MspInit+0xc4>)
 80013b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	4b22      	ldr	r3, [pc, #136]	; (8001444 <HAL_TIM_Base_MspInit+0xc4>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4a21      	ldr	r2, [pc, #132]	; (8001444 <HAL_TIM_Base_MspInit+0xc4>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <HAL_TIM_Base_MspInit+0xc4>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013e4:	2301      	movs	r3, #1
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f2:	f000 fc25 	bl	8001c40 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2018      	movs	r0, #24
 80013fc:	f000 fb6b 	bl	8001ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001400:	2018      	movs	r0, #24
 8001402:	f000 fb84 	bl	8001b0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2100      	movs	r1, #0
 800140a:	2019      	movs	r0, #25
 800140c:	f000 fb63 	bl	8001ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001410:	2019      	movs	r0, #25
 8001412:	f000 fb7c 	bl	8001b0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	201a      	movs	r0, #26
 800141c:	f000 fb5b 	bl	8001ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001420:	201a      	movs	r0, #26
 8001422:	f000 fb74 	bl	8001b0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2102      	movs	r1, #2
 800142a:	201b      	movs	r0, #27
 800142c:	f000 fb53 	bl	8001ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001430:	201b      	movs	r0, #27
 8001432:	f000 fb6c 	bl	8001b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	; 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40012c00 	.word	0x40012c00
 8001444:	40021000 	.word	0x40021000

08001448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b0a0      	sub	sp, #128	; 0x80
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001460:	f107 0318 	add.w	r3, r7, #24
 8001464:	2254      	movs	r2, #84	; 0x54
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f004 f9e3 	bl	8005834 <memset>
  if(huart->Instance==USART1)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a42      	ldr	r2, [pc, #264]	; (800157c <HAL_UART_MspInit+0x134>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d138      	bne.n	80014ea <HAL_UART_MspInit+0xa2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001478:	2301      	movs	r3, #1
 800147a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800147c:	2300      	movs	r3, #0
 800147e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001480:	f107 0318 	add.w	r3, r7, #24
 8001484:	4618      	mov	r0, r3
 8001486:	f001 fc07 	bl	8002c98 <HAL_RCCEx_PeriphCLKConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001490:	f7ff ff4c 	bl	800132c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001494:	4b3a      	ldr	r3, [pc, #232]	; (8001580 <HAL_UART_MspInit+0x138>)
 8001496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001498:	4a39      	ldr	r2, [pc, #228]	; (8001580 <HAL_UART_MspInit+0x138>)
 800149a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149e:	6613      	str	r3, [r2, #96]	; 0x60
 80014a0:	4b37      	ldr	r3, [pc, #220]	; (8001580 <HAL_UART_MspInit+0x138>)
 80014a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ac:	4b34      	ldr	r3, [pc, #208]	; (8001580 <HAL_UART_MspInit+0x138>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b0:	4a33      	ldr	r2, [pc, #204]	; (8001580 <HAL_UART_MspInit+0x138>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b8:	4b31      	ldr	r3, [pc, #196]	; (8001580 <HAL_UART_MspInit+0x138>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014d6:	2307      	movs	r3, #7
 80014d8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014de:	4619      	mov	r1, r3
 80014e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e4:	f000 fbac 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014e8:	e043      	b.n	8001572 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a25      	ldr	r2, [pc, #148]	; (8001584 <HAL_UART_MspInit+0x13c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d13e      	bne.n	8001572 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014fc:	f107 0318 	add.w	r3, r7, #24
 8001500:	4618      	mov	r0, r3
 8001502:	f001 fbc9 	bl	8002c98 <HAL_RCCEx_PeriphCLKConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 800150c:	f7ff ff0e 	bl	800132c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_UART_MspInit+0x138>)
 8001512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001514:	4a1a      	ldr	r2, [pc, #104]	; (8001580 <HAL_UART_MspInit+0x138>)
 8001516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151a:	6593      	str	r3, [r2, #88]	; 0x58
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_UART_MspInit+0x138>)
 800151e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_UART_MspInit+0x138>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152c:	4a14      	ldr	r2, [pc, #80]	; (8001580 <HAL_UART_MspInit+0x138>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_UART_MspInit+0x138>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001540:	230c      	movs	r3, #12
 8001542:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001550:	2307      	movs	r3, #7
 8001552:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001558:	4619      	mov	r1, r3
 800155a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155e:	f000 fb6f 	bl	8001c40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	2026      	movs	r0, #38	; 0x26
 8001568:	f000 fab5 	bl	8001ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800156c:	2026      	movs	r0, #38	; 0x26
 800156e:	f000 face 	bl	8001b0e <HAL_NVIC_EnableIRQ>
}
 8001572:	bf00      	nop
 8001574:	3780      	adds	r7, #128	; 0x80
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40013800 	.word	0x40013800
 8001580:	40021000 	.word	0x40021000
 8001584:	40004400 	.word	0x40004400

08001588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800158c:	e7fe      	b.n	800158c <NMI_Handler+0x4>

0800158e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <HardFault_Handler+0x4>

08001594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <MemManage_Handler+0x4>

0800159a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d4:	f000 f960 	bl	8001898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80015e2:	f002 f883 	bl	80036ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2000017c 	.word	0x2000017c

080015f0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80015f6:	f002 f879 	bl	80036ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000017c 	.word	0x2000017c

08001604 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <TIM1_TRG_COM_IRQHandler+0x10>)
 800160a:	f002 f86f 	bl	80036ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000017c 	.word	0x2000017c

08001618 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	int time0 = 0,  time1 = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
	uint8_t stop[] = {0xC1, 0x00, 0xC9, 0x00};
 8001626:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <TIM1_CC_IRQHandler+0xd0>)
 8001628:	607b      	str	r3, [r7, #4]

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800162a:	4830      	ldr	r0, [pc, #192]	; (80016ec <TIM1_CC_IRQHandler+0xd4>)
 800162c:	f002 f85e 	bl	80036ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

	if (capture == RISING){
 8001630:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <TIM1_CC_IRQHandler+0xd8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d119      	bne.n	800166c <TIM1_CC_IRQHandler+0x54>
	time0 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 8001638:	2100      	movs	r1, #0
 800163a:	482c      	ldr	r0, [pc, #176]	; (80016ec <TIM1_CC_IRQHandler+0xd4>)
 800163c:	f002 fada 	bl	8003bf4 <HAL_TIM_ReadCapturedValue>
 8001640:	4603      	mov	r3, r0
 8001642:	60fb      	str	r3, [r7, #12]
	//time0 = __HAL_TIM_GET_COMPARE(htim1, TIM_CHANNEL_1);
	capture = FALLING;
 8001644:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <TIM1_CC_IRQHandler+0xd8>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_CAPTUREPOLARITY( &htim1, TIM_CHANNEL_1,  TIM_INPUTCHANNELPOLARITY_FALLING );
 800164a:	4b28      	ldr	r3, [pc, #160]	; (80016ec <TIM1_CC_IRQHandler+0xd4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6a1a      	ldr	r2, [r3, #32]
 8001650:	4b26      	ldr	r3, [pc, #152]	; (80016ec <TIM1_CC_IRQHandler+0xd4>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 020a 	bic.w	r2, r2, #10
 8001658:	621a      	str	r2, [r3, #32]
 800165a:	4b24      	ldr	r3, [pc, #144]	; (80016ec <TIM1_CC_IRQHandler+0xd4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6a1a      	ldr	r2, [r3, #32]
 8001660:	4b22      	ldr	r3, [pc, #136]	; (80016ec <TIM1_CC_IRQHandler+0xd4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0202 	orr.w	r2, r2, #2
 8001668:	621a      	str	r2, [r3, #32]
	}



  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800166a:	e034      	b.n	80016d6 <TIM1_CC_IRQHandler+0xbe>
	time1 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 800166c:	2100      	movs	r1, #0
 800166e:	481f      	ldr	r0, [pc, #124]	; (80016ec <TIM1_CC_IRQHandler+0xd4>)
 8001670:	f002 fac0 	bl	8003bf4 <HAL_TIM_ReadCapturedValue>
 8001674:	4603      	mov	r3, r0
 8001676:	60bb      	str	r3, [r7, #8]
	distance = (time1-time0)*(0.0343) / 2;
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff48 	bl	8000514 <__aeabi_i2d>
 8001684:	a316      	add	r3, pc, #88	; (adr r3, 80016e0 <TIM1_CC_IRQHandler+0xc8>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7fe ffad 	bl	80005e8 <__aeabi_dmul>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800169e:	f7ff f8cd 	bl	800083c <__aeabi_ddiv>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f7ff f9af 	bl	8000a0c <__aeabi_d2iz>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <TIM1_CC_IRQHandler+0xdc>)
 80016b2:	6013      	str	r3, [r2, #0]
	capture = RISING;
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <TIM1_CC_IRQHandler+0xd8>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_CAPTUREPOLARITY( &htim1, TIM_CHANNEL_1,  TIM_INPUTCHANNELPOLARITY_RISING );
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <TIM1_CC_IRQHandler+0xd4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6a1a      	ldr	r2, [r3, #32]
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <TIM1_CC_IRQHandler+0xd4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 020a 	bic.w	r2, r2, #10
 80016c8:	621a      	str	r2, [r3, #32]
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <TIM1_CC_IRQHandler+0xd4>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <TIM1_CC_IRQHandler+0xd4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6a12      	ldr	r2, [r2, #32]
 80016d4:	621a      	str	r2, [r3, #32]
}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	04816f00 	.word	0x04816f00
 80016e4:	3fa18fc5 	.word	0x3fa18fc5
 80016e8:	00c900c1 	.word	0x00c900c1
 80016ec:	2000017c 	.word	0x2000017c
 80016f0:	20000040 	.word	0x20000040
 80016f4:	200000d4 	.word	0x200000d4

080016f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <USART2_IRQHandler+0x10>)
 80016fe:	f002 fedb 	bl	80044b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200001c8 	.word	0x200001c8

0800170c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001714:	4a14      	ldr	r2, [pc, #80]	; (8001768 <_sbrk+0x5c>)
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <_sbrk+0x60>)
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <_sbrk+0x64>)
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <_sbrk+0x68>)
 800172c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	429a      	cmp	r2, r3
 800173a:	d207      	bcs.n	800174c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800173c:	f004 f850 	bl	80057e0 <__errno>
 8001740:	4603      	mov	r3, r0
 8001742:	220c      	movs	r2, #12
 8001744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001746:	f04f 33ff 	mov.w	r3, #4294967295
 800174a:	e009      	b.n	8001760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <_sbrk+0x64>)
 800175c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20010000 	.word	0x20010000
 800176c:	00000400 	.word	0x00000400
 8001770:	200000d8 	.word	0x200000d8
 8001774:	20000260 	.word	0x20000260

08001778 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <SystemInit+0x20>)
 800177e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <SystemInit+0x20>)
 8001784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800179c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017a0:	f7ff ffea 	bl	8001778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80017a6:	490d      	ldr	r1, [pc, #52]	; (80017dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <LoopForever+0xe>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017bc:	4c0a      	ldr	r4, [pc, #40]	; (80017e8 <LoopForever+0x16>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ca:	f004 f80f 	bl	80057ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ce:	f7ff fb27 	bl	8000e20 <main>

080017d2 <LoopForever>:

LoopForever:
    b LoopForever
 80017d2:	e7fe      	b.n	80017d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80017e0:	0800614c 	.word	0x0800614c
  ldr r2, =_sbss
 80017e4:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80017e8:	20000260 	.word	0x20000260

080017ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC1_IRQHandler>

080017ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f8:	2003      	movs	r0, #3
 80017fa:	f000 f961 	bl	8001ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017fe:	2000      	movs	r0, #0
 8001800:	f000 f80e 	bl	8001820 <HAL_InitTick>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	71fb      	strb	r3, [r7, #7]
 800180e:	e001      	b.n	8001814 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001810:	f7ff fd92 	bl	8001338 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001814:	79fb      	ldrb	r3, [r7, #7]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001828:	2300      	movs	r3, #0
 800182a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <HAL_InitTick+0x6c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d023      	beq.n	800187c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001834:	4b16      	ldr	r3, [pc, #88]	; (8001890 <HAL_InitTick+0x70>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <HAL_InitTick+0x6c>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4619      	mov	r1, r3
 800183e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001842:	fbb3 f3f1 	udiv	r3, r3, r1
 8001846:	fbb2 f3f3 	udiv	r3, r2, r3
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f96d 	bl	8001b2a <HAL_SYSTICK_Config>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10f      	bne.n	8001876 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b0f      	cmp	r3, #15
 800185a:	d809      	bhi.n	8001870 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800185c:	2200      	movs	r2, #0
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f000 f937 	bl	8001ad6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001868:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <HAL_InitTick+0x74>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e007      	b.n	8001880 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
 8001874:	e004      	b.n	8001880 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	73fb      	strb	r3, [r7, #15]
 800187a:	e001      	b.n	8001880 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	2000004c 	.word	0x2000004c
 8001890:	20000044 	.word	0x20000044
 8001894:	20000048 	.word	0x20000048

08001898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_IncTick+0x20>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_IncTick+0x24>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a04      	ldr	r2, [pc, #16]	; (80018bc <HAL_IncTick+0x24>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	2000004c 	.word	0x2000004c
 80018bc:	2000024c 	.word	0x2000024c

080018c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return uwTick;
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <HAL_GetTick+0x14>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	2000024c 	.word	0x2000024c

080018d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e0:	f7ff ffee 	bl	80018c0 <HAL_GetTick>
 80018e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f0:	d005      	beq.n	80018fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_Delay+0x44>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4413      	add	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018fe:	bf00      	nop
 8001900:	f7ff ffde 	bl	80018c0 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	429a      	cmp	r2, r3
 800190e:	d8f7      	bhi.n	8001900 <HAL_Delay+0x28>
  {
  }
}
 8001910:	bf00      	nop
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	2000004c 	.word	0x2000004c

08001920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001952:	4a04      	ldr	r2, [pc, #16]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <__NVIC_GetPriorityGrouping+0x18>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 0307 	and.w	r3, r3, #7
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	2b00      	cmp	r3, #0
 8001994:	db0b      	blt.n	80019ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	f003 021f 	and.w	r2, r3, #31
 800199c:	4907      	ldr	r1, [pc, #28]	; (80019bc <__NVIC_EnableIRQ+0x38>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	2001      	movs	r0, #1
 80019a6:	fa00 f202 	lsl.w	r2, r0, r2
 80019aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000e100 	.word	0xe000e100

080019c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	db0a      	blt.n	80019ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	490c      	ldr	r1, [pc, #48]	; (8001a0c <__NVIC_SetPriority+0x4c>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	0112      	lsls	r2, r2, #4
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	440b      	add	r3, r1
 80019e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e8:	e00a      	b.n	8001a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4908      	ldr	r1, [pc, #32]	; (8001a10 <__NVIC_SetPriority+0x50>)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	3b04      	subs	r3, #4
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	440b      	add	r3, r1
 80019fe:	761a      	strb	r2, [r3, #24]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000e100 	.word	0xe000e100
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f1c3 0307 	rsb	r3, r3, #7
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	bf28      	it	cs
 8001a32:	2304      	movcs	r3, #4
 8001a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d902      	bls.n	8001a44 <NVIC_EncodePriority+0x30>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3b03      	subs	r3, #3
 8001a42:	e000      	b.n	8001a46 <NVIC_EncodePriority+0x32>
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	401a      	ands	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	4313      	orrs	r3, r2
         );
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a8c:	d301      	bcc.n	8001a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00f      	b.n	8001ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <SysTick_Config+0x40>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9a:	210f      	movs	r1, #15
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f7ff ff8e 	bl	80019c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <SysTick_Config+0x40>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <SysTick_Config+0x40>)
 8001aac:	2207      	movs	r2, #7
 8001aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	e000e010 	.word	0xe000e010

08001ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff29 	bl	8001920 <__NVIC_SetPriorityGrouping>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae8:	f7ff ff3e 	bl	8001968 <__NVIC_GetPriorityGrouping>
 8001aec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	6978      	ldr	r0, [r7, #20]
 8001af4:	f7ff ff8e 	bl	8001a14 <NVIC_EncodePriority>
 8001af8:	4602      	mov	r2, r0
 8001afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff5d 	bl	80019c0 <__NVIC_SetPriority>
}
 8001b06:	bf00      	nop
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff31 	bl	8001984 <__NVIC_EnableIRQ>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ffa2 	bl	8001a7c <SysTick_Config>
 8001b38:	4603      	mov	r3, r0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b085      	sub	sp, #20
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d008      	beq.n	8001b6c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e022      	b.n	8001bb2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 020e 	bic.w	r2, r2, #14
 8001b7a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	f003 021c 	and.w	r2, r3, #28
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	2101      	movs	r1, #1
 8001b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d005      	beq.n	8001be2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2204      	movs	r2, #4
 8001bda:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	e029      	b.n	8001c36 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 020e 	bic.w	r2, r2, #14
 8001bf0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0201 	bic.w	r2, r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f003 021c 	and.w	r2, r3, #28
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	2101      	movs	r1, #1
 8001c10:	fa01 f202 	lsl.w	r2, r1, r2
 8001c14:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	4798      	blx	r3
    }
  }
  return status;
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4e:	e148      	b.n	8001ee2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2101      	movs	r1, #1
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 813a 	beq.w	8001edc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d005      	beq.n	8001c80 <HAL_GPIO_Init+0x40>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d130      	bne.n	8001ce2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	091b      	lsrs	r3, r3, #4
 8001ccc:	f003 0201 	and.w	r2, r3, #1
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d017      	beq.n	8001d1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d123      	bne.n	8001d72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	08da      	lsrs	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3208      	adds	r2, #8
 8001d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	220f      	movs	r2, #15
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	08da      	lsrs	r2, r3, #3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3208      	adds	r2, #8
 8001d6c:	6939      	ldr	r1, [r7, #16]
 8001d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0203 	and.w	r2, r3, #3
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8094 	beq.w	8001edc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db4:	4b52      	ldr	r3, [pc, #328]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db8:	4a51      	ldr	r2, [pc, #324]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6613      	str	r3, [r2, #96]	; 0x60
 8001dc0:	4b4f      	ldr	r3, [pc, #316]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dcc:	4a4d      	ldr	r2, [pc, #308]	; (8001f04 <HAL_GPIO_Init+0x2c4>)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	089b      	lsrs	r3, r3, #2
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	220f      	movs	r2, #15
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001df6:	d00d      	beq.n	8001e14 <HAL_GPIO_Init+0x1d4>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a43      	ldr	r2, [pc, #268]	; (8001f08 <HAL_GPIO_Init+0x2c8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d007      	beq.n	8001e10 <HAL_GPIO_Init+0x1d0>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a42      	ldr	r2, [pc, #264]	; (8001f0c <HAL_GPIO_Init+0x2cc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d101      	bne.n	8001e0c <HAL_GPIO_Init+0x1cc>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e004      	b.n	8001e16 <HAL_GPIO_Init+0x1d6>
 8001e0c:	2307      	movs	r3, #7
 8001e0e:	e002      	b.n	8001e16 <HAL_GPIO_Init+0x1d6>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <HAL_GPIO_Init+0x1d6>
 8001e14:	2300      	movs	r3, #0
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	f002 0203 	and.w	r2, r2, #3
 8001e1c:	0092      	lsls	r2, r2, #2
 8001e1e:	4093      	lsls	r3, r2
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e26:	4937      	ldr	r1, [pc, #220]	; (8001f04 <HAL_GPIO_Init+0x2c4>)
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	089b      	lsrs	r3, r3, #2
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e34:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e58:	4a2d      	ldr	r2, [pc, #180]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e5e:	4b2c      	ldr	r3, [pc, #176]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e82:	4a23      	ldr	r2, [pc, #140]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e88:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001eac:	4a18      	ldr	r2, [pc, #96]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001eb2:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f47f aeaf 	bne.w	8001c50 <HAL_GPIO_Init+0x10>
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	bf00      	nop
 8001ef6:	371c      	adds	r7, #28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40010000 	.word	0x40010000
 8001f08:	48000400 	.word	0x48000400
 8001f0c:	48000800 	.word	0x48000800
 8001f10:	40010400 	.word	0x40010400

08001f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
 8001f20:	4613      	mov	r3, r2
 8001f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f24:	787b      	ldrb	r3, [r7, #1]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f2a:	887a      	ldrh	r2, [r7, #2]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f30:	e002      	b.n	8001f38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f32:	887a      	ldrh	r2, [r7, #2]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f52:	6013      	str	r3, [r2, #0]
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40007000 	.word	0x40007000

08001f64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <HAL_PWREx_GetVoltageRange+0x18>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40007000 	.word	0x40007000

08001f80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f8e:	d130      	bne.n	8001ff2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f90:	4b23      	ldr	r3, [pc, #140]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f9c:	d038      	beq.n	8002010 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fa6:	4a1e      	ldr	r2, [pc, #120]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fae:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2232      	movs	r2, #50	; 0x32
 8001fb4:	fb02 f303 	mul.w	r3, r2, r3
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fba:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbe:	0c9b      	lsrs	r3, r3, #18
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fc4:	e002      	b.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd8:	d102      	bne.n	8001fe0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f2      	bne.n	8001fc6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fec:	d110      	bne.n	8002010 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e00f      	b.n	8002012 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ffe:	d007      	beq.n	8002010 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002008:	4a05      	ldr	r2, [pc, #20]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800200e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40007000 	.word	0x40007000
 8002024:	20000044 	.word	0x20000044
 8002028:	431bde83 	.word	0x431bde83

0800202c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e3fe      	b.n	800283c <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203e:	4ba1      	ldr	r3, [pc, #644]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002048:	4b9e      	ldr	r3, [pc, #632]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 80e4 	beq.w	8002228 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <HAL_RCC_OscConfig+0x4a>
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	2b0c      	cmp	r3, #12
 800206a:	f040 808b 	bne.w	8002184 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2b01      	cmp	r3, #1
 8002072:	f040 8087 	bne.w	8002184 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002076:	4b93      	ldr	r3, [pc, #588]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_RCC_OscConfig+0x62>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e3d6      	b.n	800283c <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1a      	ldr	r2, [r3, #32]
 8002092:	4b8c      	ldr	r3, [pc, #560]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <HAL_RCC_OscConfig+0x7c>
 800209e:	4b89      	ldr	r3, [pc, #548]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020a6:	e005      	b.n	80020b4 <HAL_RCC_OscConfig+0x88>
 80020a8:	4b86      	ldr	r3, [pc, #536]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 80020aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ae:	091b      	lsrs	r3, r3, #4
 80020b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d223      	bcs.n	8002100 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 fd8b 	bl	8002bd8 <RCC_SetFlashLatencyFromMSIRange>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e3b7      	b.n	800283c <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020cc:	4b7d      	ldr	r3, [pc, #500]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a7c      	ldr	r2, [pc, #496]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 80020d2:	f043 0308 	orr.w	r3, r3, #8
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	4b7a      	ldr	r3, [pc, #488]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4977      	ldr	r1, [pc, #476]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ea:	4b76      	ldr	r3, [pc, #472]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	4972      	ldr	r1, [pc, #456]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
 80020fe:	e025      	b.n	800214c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002100:	4b70      	ldr	r3, [pc, #448]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a6f      	ldr	r2, [pc, #444]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 8002106:	f043 0308 	orr.w	r3, r3, #8
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b6d      	ldr	r3, [pc, #436]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	496a      	ldr	r1, [pc, #424]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800211e:	4b69      	ldr	r3, [pc, #420]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	4965      	ldr	r1, [pc, #404]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fd4b 	bl	8002bd8 <RCC_SetFlashLatencyFromMSIRange>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e377      	b.n	800283c <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800214c:	f000 fc80 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b5c      	ldr	r3, [pc, #368]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	091b      	lsrs	r3, r3, #4
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	495a      	ldr	r1, [pc, #360]	; (80022c8 <HAL_RCC_OscConfig+0x29c>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
 8002168:	4a58      	ldr	r2, [pc, #352]	; (80022cc <HAL_RCC_OscConfig+0x2a0>)
 800216a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800216c:	4b58      	ldr	r3, [pc, #352]	; (80022d0 <HAL_RCC_OscConfig+0x2a4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fb55 	bl	8001820 <HAL_InitTick>
 8002176:	4603      	mov	r3, r0
 8002178:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d052      	beq.n	8002226 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	e35b      	b.n	800283c <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d032      	beq.n	80021f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800218c:	4b4d      	ldr	r3, [pc, #308]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002198:	f7ff fb92 	bl	80018c0 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021a0:	f7ff fb8e 	bl	80018c0 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e344      	b.n	800283c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b2:	4b44      	ldr	r3, [pc, #272]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021be:	4b41      	ldr	r3, [pc, #260]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a40      	ldr	r2, [pc, #256]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 80021c4:	f043 0308 	orr.w	r3, r3, #8
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b3e      	ldr	r3, [pc, #248]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	493b      	ldr	r1, [pc, #236]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021dc:	4b39      	ldr	r3, [pc, #228]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	4936      	ldr	r1, [pc, #216]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
 80021f0:	e01a      	b.n	8002228 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021f2:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a33      	ldr	r2, [pc, #204]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021fe:	f7ff fb5f 	bl	80018c0 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002206:	f7ff fb5b 	bl	80018c0 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e311      	b.n	800283c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002218:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x1da>
 8002224:	e000      	b.n	8002228 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002226:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d074      	beq.n	800231e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b08      	cmp	r3, #8
 8002238:	d005      	beq.n	8002246 <HAL_RCC_OscConfig+0x21a>
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b0c      	cmp	r3, #12
 800223e:	d10e      	bne.n	800225e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d10b      	bne.n	800225e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002246:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d064      	beq.n	800231c <HAL_RCC_OscConfig+0x2f0>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d160      	bne.n	800231c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e2ee      	b.n	800283c <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x24a>
 8002268:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a15      	ldr	r2, [pc, #84]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 800226e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	e01d      	b.n	80022b2 <HAL_RCC_OscConfig+0x286>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800227e:	d10c      	bne.n	800229a <HAL_RCC_OscConfig+0x26e>
 8002280:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0f      	ldr	r2, [pc, #60]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 8002286:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 8002292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	e00b      	b.n	80022b2 <HAL_RCC_OscConfig+0x286>
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a09      	ldr	r2, [pc, #36]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 80022a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a06      	ldr	r2, [pc, #24]	; (80022c4 <HAL_RCC_OscConfig+0x298>)
 80022ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d01c      	beq.n	80022f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ba:	f7ff fb01 	bl	80018c0 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022c0:	e011      	b.n	80022e6 <HAL_RCC_OscConfig+0x2ba>
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000
 80022c8:	080060c0 	.word	0x080060c0
 80022cc:	20000044 	.word	0x20000044
 80022d0:	20000048 	.word	0x20000048
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d4:	f7ff faf4 	bl	80018c0 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e2aa      	b.n	800283c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e6:	4baf      	ldr	r3, [pc, #700]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x2a8>
 80022f2:	e014      	b.n	800231e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7ff fae4 	bl	80018c0 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022fc:	f7ff fae0 	bl	80018c0 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e296      	b.n	800283c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800230e:	4ba5      	ldr	r3, [pc, #660]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x2d0>
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d060      	beq.n	80023ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2b04      	cmp	r3, #4
 800232e:	d005      	beq.n	800233c <HAL_RCC_OscConfig+0x310>
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d119      	bne.n	800236a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d116      	bne.n	800236a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800233c:	4b99      	ldr	r3, [pc, #612]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_OscConfig+0x328>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e273      	b.n	800283c <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002354:	4b93      	ldr	r3, [pc, #588]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	061b      	lsls	r3, r3, #24
 8002362:	4990      	ldr	r1, [pc, #576]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002368:	e040      	b.n	80023ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d023      	beq.n	80023ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002372:	4b8c      	ldr	r3, [pc, #560]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a8b      	ldr	r2, [pc, #556]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 8002378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7ff fa9f 	bl	80018c0 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002386:	f7ff fa9b 	bl	80018c0 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e251      	b.n	800283c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002398:	4b82      	ldr	r3, [pc, #520]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a4:	4b7f      	ldr	r3, [pc, #508]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	497c      	ldr	r1, [pc, #496]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
 80023b8:	e018      	b.n	80023ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ba:	4b7a      	ldr	r3, [pc, #488]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a79      	ldr	r2, [pc, #484]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 80023c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7ff fa7b 	bl	80018c0 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ce:	f7ff fa77 	bl	80018c0 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e22d      	b.n	800283c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e0:	4b70      	ldr	r3, [pc, #448]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f0      	bne.n	80023ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d03c      	beq.n	8002472 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d01c      	beq.n	800243a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002400:	4b68      	ldr	r3, [pc, #416]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 8002402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002406:	4a67      	ldr	r2, [pc, #412]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002410:	f7ff fa56 	bl	80018c0 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002418:	f7ff fa52 	bl	80018c0 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e208      	b.n	800283c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800242a:	4b5e      	ldr	r3, [pc, #376]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 800242c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0ef      	beq.n	8002418 <HAL_RCC_OscConfig+0x3ec>
 8002438:	e01b      	b.n	8002472 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243a:	4b5a      	ldr	r3, [pc, #360]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 800243c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002440:	4a58      	ldr	r2, [pc, #352]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 8002442:	f023 0301 	bic.w	r3, r3, #1
 8002446:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244a:	f7ff fa39 	bl	80018c0 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002452:	f7ff fa35 	bl	80018c0 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e1eb      	b.n	800283c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002464:	4b4f      	ldr	r3, [pc, #316]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 8002466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1ef      	bne.n	8002452 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80a6 	beq.w	80025cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002484:	4b47      	ldr	r3, [pc, #284]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 8002486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10d      	bne.n	80024ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002490:	4b44      	ldr	r3, [pc, #272]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	4a43      	ldr	r2, [pc, #268]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 8002496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249a:	6593      	str	r3, [r2, #88]	; 0x58
 800249c:	4b41      	ldr	r3, [pc, #260]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 800249e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a8:	2301      	movs	r3, #1
 80024aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ac:	4b3e      	ldr	r3, [pc, #248]	; (80025a8 <HAL_RCC_OscConfig+0x57c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d118      	bne.n	80024ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024b8:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <HAL_RCC_OscConfig+0x57c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a3a      	ldr	r2, [pc, #232]	; (80025a8 <HAL_RCC_OscConfig+0x57c>)
 80024be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c4:	f7ff f9fc 	bl	80018c0 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024cc:	f7ff f9f8 	bl	80018c0 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e1ae      	b.n	800283c <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024de:	4b32      	ldr	r3, [pc, #200]	; (80025a8 <HAL_RCC_OscConfig+0x57c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d108      	bne.n	8002504 <HAL_RCC_OscConfig+0x4d8>
 80024f2:	4b2c      	ldr	r3, [pc, #176]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	4a2a      	ldr	r2, [pc, #168]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002502:	e024      	b.n	800254e <HAL_RCC_OscConfig+0x522>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b05      	cmp	r3, #5
 800250a:	d110      	bne.n	800252e <HAL_RCC_OscConfig+0x502>
 800250c:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002512:	4a24      	ldr	r2, [pc, #144]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800251c:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	4a20      	ldr	r2, [pc, #128]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800252c:	e00f      	b.n	800254e <HAL_RCC_OscConfig+0x522>
 800252e:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 8002530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002534:	4a1b      	ldr	r2, [pc, #108]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800253e:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 8002540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002544:	4a17      	ldr	r2, [pc, #92]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 8002546:	f023 0304 	bic.w	r3, r3, #4
 800254a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d016      	beq.n	8002584 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002556:	f7ff f9b3 	bl	80018c0 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255e:	f7ff f9af 	bl	80018c0 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	; 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e163      	b.n	800283c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCC_OscConfig+0x578>)
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0ed      	beq.n	800255e <HAL_RCC_OscConfig+0x532>
 8002582:	e01a      	b.n	80025ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002584:	f7ff f99c 	bl	80018c0 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800258a:	e00f      	b.n	80025ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258c:	f7ff f998 	bl	80018c0 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	; 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d906      	bls.n	80025ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e14c      	b.n	800283c <HAL_RCC_OscConfig+0x810>
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ac:	4ba5      	ldr	r3, [pc, #660]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1e8      	bne.n	800258c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ba:	7ffb      	ldrb	r3, [r7, #31]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d105      	bne.n	80025cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c0:	4ba0      	ldr	r3, [pc, #640]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	4a9f      	ldr	r2, [pc, #636]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 80025c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d03c      	beq.n	8002652 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01c      	beq.n	800261a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025e0:	4b98      	ldr	r3, [pc, #608]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 80025e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025e6:	4a97      	ldr	r2, [pc, #604]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7ff f966 	bl	80018c0 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025f8:	f7ff f962 	bl	80018c0 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e118      	b.n	800283c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800260a:	4b8e      	ldr	r3, [pc, #568]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 800260c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ef      	beq.n	80025f8 <HAL_RCC_OscConfig+0x5cc>
 8002618:	e01b      	b.n	8002652 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800261a:	4b8a      	ldr	r3, [pc, #552]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 800261c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002620:	4a88      	ldr	r2, [pc, #544]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262a:	f7ff f949 	bl	80018c0 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002632:	f7ff f945 	bl	80018c0 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e0fb      	b.n	800283c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002644:	4b7f      	ldr	r3, [pc, #508]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 8002646:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1ef      	bne.n	8002632 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80ef 	beq.w	800283a <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	2b02      	cmp	r3, #2
 8002662:	f040 80c5 	bne.w	80027f0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002666:	4b77      	ldr	r3, [pc, #476]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f003 0203 	and.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	429a      	cmp	r2, r3
 8002678:	d12c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	3b01      	subs	r3, #1
 8002686:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002688:	429a      	cmp	r2, r3
 800268a:	d123      	bne.n	80026d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002696:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d11b      	bne.n	80026d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d113      	bne.n	80026d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	085b      	lsrs	r3, r3, #1
 80026b8:	3b01      	subs	r3, #1
 80026ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d109      	bne.n	80026d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	085b      	lsrs	r3, r3, #1
 80026cc:	3b01      	subs	r3, #1
 80026ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d067      	beq.n	80027a4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	2b0c      	cmp	r3, #12
 80026d8:	d062      	beq.n	80027a0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026da:	4b5a      	ldr	r3, [pc, #360]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e0a8      	b.n	800283c <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026ea:	4b56      	ldr	r3, [pc, #344]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a55      	ldr	r2, [pc, #340]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 80026f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026f6:	f7ff f8e3 	bl	80018c0 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fe:	f7ff f8df 	bl	80018c0 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e095      	b.n	800283c <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002710:	4b4c      	ldr	r3, [pc, #304]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f0      	bne.n	80026fe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800271c:	4b49      	ldr	r3, [pc, #292]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	4b49      	ldr	r3, [pc, #292]	; (8002848 <HAL_RCC_OscConfig+0x81c>)
 8002722:	4013      	ands	r3, r2
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800272c:	3a01      	subs	r2, #1
 800272e:	0112      	lsls	r2, r2, #4
 8002730:	4311      	orrs	r1, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002736:	0212      	lsls	r2, r2, #8
 8002738:	4311      	orrs	r1, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800273e:	0852      	lsrs	r2, r2, #1
 8002740:	3a01      	subs	r2, #1
 8002742:	0552      	lsls	r2, r2, #21
 8002744:	4311      	orrs	r1, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800274a:	0852      	lsrs	r2, r2, #1
 800274c:	3a01      	subs	r2, #1
 800274e:	0652      	lsls	r2, r2, #25
 8002750:	4311      	orrs	r1, r2
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002756:	06d2      	lsls	r2, r2, #27
 8002758:	430a      	orrs	r2, r1
 800275a:	493a      	ldr	r1, [pc, #232]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 800275c:	4313      	orrs	r3, r2
 800275e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002760:	4b38      	ldr	r3, [pc, #224]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a37      	ldr	r2, [pc, #220]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 8002766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800276a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800276c:	4b35      	ldr	r3, [pc, #212]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4a34      	ldr	r2, [pc, #208]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 8002772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002776:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002778:	f7ff f8a2 	bl	80018c0 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002780:	f7ff f89e 	bl	80018c0 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e054      	b.n	800283c <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002792:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800279e:	e04c      	b.n	800283a <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e04b      	b.n	800283c <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a4:	4b27      	ldr	r3, [pc, #156]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d144      	bne.n	800283a <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027b0:	4b24      	ldr	r3, [pc, #144]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a23      	ldr	r2, [pc, #140]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 80027b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027bc:	4b21      	ldr	r3, [pc, #132]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4a20      	ldr	r2, [pc, #128]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 80027c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027c8:	f7ff f87a 	bl	80018c0 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d0:	f7ff f876 	bl	80018c0 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e02c      	b.n	800283c <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e2:	4b18      	ldr	r3, [pc, #96]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCC_OscConfig+0x7a4>
 80027ee:	e024      	b.n	800283a <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	2b0c      	cmp	r3, #12
 80027f4:	d01f      	beq.n	8002836 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a12      	ldr	r2, [pc, #72]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 80027fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002802:	f7ff f85d 	bl	80018c0 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280a:	f7ff f859 	bl	80018c0 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e00f      	b.n	800283c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f0      	bne.n	800280a <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	4905      	ldr	r1, [pc, #20]	; (8002844 <HAL_RCC_OscConfig+0x818>)
 800282e:	4b07      	ldr	r3, [pc, #28]	; (800284c <HAL_RCC_OscConfig+0x820>)
 8002830:	4013      	ands	r3, r2
 8002832:	60cb      	str	r3, [r1, #12]
 8002834:	e001      	b.n	800283a <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3720      	adds	r7, #32
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40021000 	.word	0x40021000
 8002848:	019d808c 	.word	0x019d808c
 800284c:	feeefffc 	.word	0xfeeefffc

08002850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0e7      	b.n	8002a34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002864:	4b75      	ldr	r3, [pc, #468]	; (8002a3c <HAL_RCC_ClockConfig+0x1ec>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d910      	bls.n	8002894 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b72      	ldr	r3, [pc, #456]	; (8002a3c <HAL_RCC_ClockConfig+0x1ec>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 0207 	bic.w	r2, r3, #7
 800287a:	4970      	ldr	r1, [pc, #448]	; (8002a3c <HAL_RCC_ClockConfig+0x1ec>)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	4313      	orrs	r3, r2
 8002880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002882:	4b6e      	ldr	r3, [pc, #440]	; (8002a3c <HAL_RCC_ClockConfig+0x1ec>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0cf      	b.n	8002a34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d010      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	4b66      	ldr	r3, [pc, #408]	; (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d908      	bls.n	80028c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b0:	4b63      	ldr	r3, [pc, #396]	; (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	4960      	ldr	r1, [pc, #384]	; (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d04c      	beq.n	8002968 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d107      	bne.n	80028e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d6:	4b5a      	ldr	r3, [pc, #360]	; (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d121      	bne.n	8002926 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e0a6      	b.n	8002a34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d107      	bne.n	80028fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ee:	4b54      	ldr	r3, [pc, #336]	; (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d115      	bne.n	8002926 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e09a      	b.n	8002a34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d107      	bne.n	8002916 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002906:	4b4e      	ldr	r3, [pc, #312]	; (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d109      	bne.n	8002926 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e08e      	b.n	8002a34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002916:	4b4a      	ldr	r3, [pc, #296]	; (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e086      	b.n	8002a34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002926:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f023 0203 	bic.w	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4943      	ldr	r1, [pc, #268]	; (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 8002934:	4313      	orrs	r3, r2
 8002936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002938:	f7fe ffc2 	bl	80018c0 <HAL_GetTick>
 800293c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293e:	e00a      	b.n	8002956 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002940:	f7fe ffbe 	bl	80018c0 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	; 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e06e      	b.n	8002a34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002956:	4b3a      	ldr	r3, [pc, #232]	; (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 020c 	and.w	r2, r3, #12
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	429a      	cmp	r2, r3
 8002966:	d1eb      	bne.n	8002940 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d010      	beq.n	8002996 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002980:	429a      	cmp	r2, r3
 8002982:	d208      	bcs.n	8002996 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002984:	4b2e      	ldr	r3, [pc, #184]	; (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	492b      	ldr	r1, [pc, #172]	; (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 8002992:	4313      	orrs	r3, r2
 8002994:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002996:	4b29      	ldr	r3, [pc, #164]	; (8002a3c <HAL_RCC_ClockConfig+0x1ec>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d210      	bcs.n	80029c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a4:	4b25      	ldr	r3, [pc, #148]	; (8002a3c <HAL_RCC_ClockConfig+0x1ec>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f023 0207 	bic.w	r2, r3, #7
 80029ac:	4923      	ldr	r1, [pc, #140]	; (8002a3c <HAL_RCC_ClockConfig+0x1ec>)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b4:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <HAL_RCC_ClockConfig+0x1ec>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e036      	b.n	8002a34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d2:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	4918      	ldr	r1, [pc, #96]	; (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d009      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029f0:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4910      	ldr	r1, [pc, #64]	; (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a04:	f000 f824 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	490b      	ldr	r1, [pc, #44]	; (8002a44 <HAL_RCC_ClockConfig+0x1f4>)
 8002a16:	5ccb      	ldrb	r3, [r1, r3]
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a20:	4a09      	ldr	r2, [pc, #36]	; (8002a48 <HAL_RCC_ClockConfig+0x1f8>)
 8002a22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a24:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <HAL_RCC_ClockConfig+0x1fc>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe fef9 	bl	8001820 <HAL_InitTick>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a32:	7afb      	ldrb	r3, [r7, #11]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40022000 	.word	0x40022000
 8002a40:	40021000 	.word	0x40021000
 8002a44:	080060c0 	.word	0x080060c0
 8002a48:	20000044 	.word	0x20000044
 8002a4c:	20000048 	.word	0x20000048

08002a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	; 0x24
 8002a54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a5e:	4b3e      	ldr	r3, [pc, #248]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a68:	4b3b      	ldr	r3, [pc, #236]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0x34>
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	2b0c      	cmp	r3, #12
 8002a7c:	d121      	bne.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d11e      	bne.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a84:	4b34      	ldr	r3, [pc, #208]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d107      	bne.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a90:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a96:	0a1b      	lsrs	r3, r3, #8
 8002a98:	f003 030f 	and.w	r3, r3, #15
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	e005      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002aa0:	4b2d      	ldr	r3, [pc, #180]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002aac:	4a2b      	ldr	r2, [pc, #172]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10d      	bne.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ac0:	e00a      	b.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d102      	bne.n	8002ace <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ac8:	4b25      	ldr	r3, [pc, #148]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002aca:	61bb      	str	r3, [r7, #24]
 8002acc:	e004      	b.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ad4:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ad6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	2b0c      	cmp	r3, #12
 8002adc:	d134      	bne.n	8002b48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ade:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d003      	beq.n	8002af6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d003      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0xac>
 8002af4:	e005      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002af6:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002af8:	617b      	str	r3, [r7, #20]
      break;
 8002afa:	e005      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002afc:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x114>)
 8002afe:	617b      	str	r3, [r7, #20]
      break;
 8002b00:	e002      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	617b      	str	r3, [r7, #20]
      break;
 8002b06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b08:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	3301      	adds	r3, #1
 8002b14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b16:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	0a1b      	lsrs	r3, r3, #8
 8002b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	fb02 f203 	mul.w	r2, r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	0e5b      	lsrs	r3, r3, #25
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b48:	69bb      	ldr	r3, [r7, #24]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3724      	adds	r7, #36	; 0x24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	080060d8 	.word	0x080060d8
 8002b60:	00f42400 	.word	0x00f42400
 8002b64:	007a1200 	.word	0x007a1200

08002b68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	20000044 	.word	0x20000044

08002b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b84:	f7ff fff0 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	4904      	ldr	r1, [pc, #16]	; (8002ba8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b96:	5ccb      	ldrb	r3, [r1, r3]
 8002b98:	f003 031f 	and.w	r3, r3, #31
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	080060d0 	.word	0x080060d0

08002bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bb0:	f7ff ffda 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	0adb      	lsrs	r3, r3, #11
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	4904      	ldr	r1, [pc, #16]	; (8002bd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bc2:	5ccb      	ldrb	r3, [r1, r3]
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	080060d0 	.word	0x080060d0

08002bd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002be0:	2300      	movs	r3, #0
 8002be2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002be4:	4b2a      	ldr	r3, [pc, #168]	; (8002c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bf0:	f7ff f9b8 	bl	8001f64 <HAL_PWREx_GetVoltageRange>
 8002bf4:	6178      	str	r0, [r7, #20]
 8002bf6:	e014      	b.n	8002c22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bf8:	4b25      	ldr	r3, [pc, #148]	; (8002c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfc:	4a24      	ldr	r2, [pc, #144]	; (8002c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c02:	6593      	str	r3, [r2, #88]	; 0x58
 8002c04:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c10:	f7ff f9a8 	bl	8001f64 <HAL_PWREx_GetVoltageRange>
 8002c14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c16:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1a:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c28:	d10b      	bne.n	8002c42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b80      	cmp	r3, #128	; 0x80
 8002c2e:	d919      	bls.n	8002c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2ba0      	cmp	r3, #160	; 0xa0
 8002c34:	d902      	bls.n	8002c3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c36:	2302      	movs	r3, #2
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	e013      	b.n	8002c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	e010      	b.n	8002c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b80      	cmp	r3, #128	; 0x80
 8002c46:	d902      	bls.n	8002c4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c48:	2303      	movs	r3, #3
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	e00a      	b.n	8002c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b80      	cmp	r3, #128	; 0x80
 8002c52:	d102      	bne.n	8002c5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c54:	2302      	movs	r3, #2
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	e004      	b.n	8002c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b70      	cmp	r3, #112	; 0x70
 8002c5e:	d101      	bne.n	8002c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c60:	2301      	movs	r3, #1
 8002c62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f023 0207 	bic.w	r2, r3, #7
 8002c6c:	4909      	ldr	r1, [pc, #36]	; (8002c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c74:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d001      	beq.n	8002c86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40022000 	.word	0x40022000

08002c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d031      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cbc:	d01a      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002cbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cc2:	d814      	bhi.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d009      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ccc:	d10f      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002cce:	4bac      	ldr	r3, [pc, #688]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	4aab      	ldr	r2, [pc, #684]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cda:	e00c      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3304      	adds	r3, #4
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 f9dc 	bl	80030a0 <RCCEx_PLLSAI1_Config>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cec:	e003      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	74fb      	strb	r3, [r7, #19]
      break;
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cf6:	7cfb      	ldrb	r3, [r7, #19]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10b      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cfc:	4ba0      	ldr	r3, [pc, #640]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0a:	499d      	ldr	r1, [pc, #628]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d12:	e001      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d14:	7cfb      	ldrb	r3, [r7, #19]
 8002d16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 8099 	beq.w	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d26:	2300      	movs	r3, #0
 8002d28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d2a:	4b95      	ldr	r3, [pc, #596]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00d      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d40:	4b8f      	ldr	r3, [pc, #572]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d44:	4a8e      	ldr	r2, [pc, #568]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d4c:	4b8c      	ldr	r3, [pc, #560]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d5c:	4b89      	ldr	r3, [pc, #548]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a88      	ldr	r2, [pc, #544]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d68:	f7fe fdaa 	bl	80018c0 <HAL_GetTick>
 8002d6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d6e:	e009      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d70:	f7fe fda6 	bl	80018c0 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d902      	bls.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	74fb      	strb	r3, [r7, #19]
        break;
 8002d82:	e005      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d84:	4b7f      	ldr	r3, [pc, #508]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0ef      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002d90:	7cfb      	ldrb	r3, [r7, #19]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d155      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d96:	4b7a      	ldr	r3, [pc, #488]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d01e      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d019      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002db2:	4b73      	ldr	r3, [pc, #460]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dbc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dbe:	4b70      	ldr	r3, [pc, #448]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc4:	4a6e      	ldr	r2, [pc, #440]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dce:	4b6c      	ldr	r3, [pc, #432]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd4:	4a6a      	ldr	r2, [pc, #424]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002dde:	4a68      	ldr	r2, [pc, #416]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d016      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df0:	f7fe fd66 	bl	80018c0 <HAL_GetTick>
 8002df4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002df6:	e00b      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df8:	f7fe fd62 	bl	80018c0 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d902      	bls.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	74fb      	strb	r3, [r7, #19]
            break;
 8002e0e:	e006      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e10:	4b5b      	ldr	r3, [pc, #364]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0ec      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002e1e:	7cfb      	ldrb	r3, [r7, #19]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10b      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e24:	4b56      	ldr	r3, [pc, #344]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e32:	4953      	ldr	r1, [pc, #332]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e3a:	e004      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e3c:	7cfb      	ldrb	r3, [r7, #19]
 8002e3e:	74bb      	strb	r3, [r7, #18]
 8002e40:	e001      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e42:	7cfb      	ldrb	r3, [r7, #19]
 8002e44:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e46:	7c7b      	ldrb	r3, [r7, #17]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d105      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e4c:	4b4c      	ldr	r3, [pc, #304]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e50:	4a4b      	ldr	r2, [pc, #300]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e56:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e64:	4b46      	ldr	r3, [pc, #280]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	f023 0203 	bic.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	4943      	ldr	r1, [pc, #268]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e86:	4b3e      	ldr	r3, [pc, #248]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8c:	f023 020c 	bic.w	r2, r3, #12
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	493a      	ldr	r1, [pc, #232]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ea8:	4b35      	ldr	r3, [pc, #212]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	4932      	ldr	r1, [pc, #200]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eca:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed8:	4929      	ldr	r1, [pc, #164]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002eec:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	4921      	ldr	r1, [pc, #132]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f0e:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	4918      	ldr	r1, [pc, #96]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f30:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4910      	ldr	r1, [pc, #64]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d02c      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f52:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	4907      	ldr	r1, [pc, #28]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f70:	d10a      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f72:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	4a02      	ldr	r2, [pc, #8]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f7c:	60d3      	str	r3, [r2, #12]
 8002f7e:	e015      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f90:	d10c      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3304      	adds	r3, #4
 8002f96:	2101      	movs	r1, #1
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 f881 	bl	80030a0 <RCCEx_PLLSAI1_Config>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fa2:	7cfb      	ldrb	r3, [r7, #19]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8002fa8:	7cfb      	ldrb	r3, [r7, #19]
 8002faa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d028      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fb8:	4b30      	ldr	r3, [pc, #192]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	492d      	ldr	r1, [pc, #180]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd8:	4b28      	ldr	r3, [pc, #160]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a27      	ldr	r2, [pc, #156]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fe2:	60d3      	str	r3, [r2, #12]
 8002fe4:	e011      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fee:	d10c      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 f852 	bl	80030a0 <RCCEx_PLLSAI1_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003000:	7cfb      	ldrb	r3, [r7, #19]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003006:	7cfb      	ldrb	r3, [r7, #19]
 8003008:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d01c      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003016:	4b19      	ldr	r3, [pc, #100]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003024:	4915      	ldr	r1, [pc, #84]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003030:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003034:	d10c      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3304      	adds	r3, #4
 800303a:	2102      	movs	r1, #2
 800303c:	4618      	mov	r0, r3
 800303e:	f000 f82f 	bl	80030a0 <RCCEx_PLLSAI1_Config>
 8003042:	4603      	mov	r3, r0
 8003044:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003046:	7cfb      	ldrb	r3, [r7, #19]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800304c:	7cfb      	ldrb	r3, [r7, #19]
 800304e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800305c:	4b07      	ldr	r3, [pc, #28]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003062:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306a:	4904      	ldr	r1, [pc, #16]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003072:	7cbb      	ldrb	r3, [r7, #18]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000

08003080 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a04      	ldr	r2, [pc, #16]	; (800309c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800308a:	f043 0304 	orr.w	r3, r3, #4
 800308e:	6013      	str	r3, [r2, #0]
}
 8003090:	bf00      	nop
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40021000 	.word	0x40021000

080030a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030ae:	4b74      	ldr	r3, [pc, #464]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d018      	beq.n	80030ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030ba:	4b71      	ldr	r3, [pc, #452]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f003 0203 	and.w	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d10d      	bne.n	80030e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
       ||
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d009      	beq.n	80030e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030d2:	4b6b      	ldr	r3, [pc, #428]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	091b      	lsrs	r3, r3, #4
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
       ||
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d047      	beq.n	8003176 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
 80030ea:	e044      	b.n	8003176 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d018      	beq.n	8003126 <RCCEx_PLLSAI1_Config+0x86>
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d825      	bhi.n	8003144 <RCCEx_PLLSAI1_Config+0xa4>
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d002      	beq.n	8003102 <RCCEx_PLLSAI1_Config+0x62>
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d009      	beq.n	8003114 <RCCEx_PLLSAI1_Config+0x74>
 8003100:	e020      	b.n	8003144 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003102:	4b5f      	ldr	r3, [pc, #380]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d11d      	bne.n	800314a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003112:	e01a      	b.n	800314a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003114:	4b5a      	ldr	r3, [pc, #360]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d116      	bne.n	800314e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003124:	e013      	b.n	800314e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003126:	4b56      	ldr	r3, [pc, #344]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10f      	bne.n	8003152 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003132:	4b53      	ldr	r3, [pc, #332]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003142:	e006      	b.n	8003152 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
      break;
 8003148:	e004      	b.n	8003154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800314a:	bf00      	nop
 800314c:	e002      	b.n	8003154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800314e:	bf00      	nop
 8003150:	e000      	b.n	8003154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003152:	bf00      	nop
    }

    if(status == HAL_OK)
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10d      	bne.n	8003176 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800315a:	4b49      	ldr	r3, [pc, #292]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6819      	ldr	r1, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	3b01      	subs	r3, #1
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	430b      	orrs	r3, r1
 8003170:	4943      	ldr	r1, [pc, #268]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003172:	4313      	orrs	r3, r2
 8003174:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d17c      	bne.n	8003276 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800317c:	4b40      	ldr	r3, [pc, #256]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a3f      	ldr	r2, [pc, #252]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003182:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003186:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003188:	f7fe fb9a 	bl	80018c0 <HAL_GetTick>
 800318c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800318e:	e009      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003190:	f7fe fb96 	bl	80018c0 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d902      	bls.n	80031a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	73fb      	strb	r3, [r7, #15]
        break;
 80031a2:	e005      	b.n	80031b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031a4:	4b36      	ldr	r3, [pc, #216]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1ef      	bne.n	8003190 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d15f      	bne.n	8003276 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d110      	bne.n	80031de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031bc:	4b30      	ldr	r3, [pc, #192]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80031c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6892      	ldr	r2, [r2, #8]
 80031cc:	0211      	lsls	r1, r2, #8
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68d2      	ldr	r2, [r2, #12]
 80031d2:	06d2      	lsls	r2, r2, #27
 80031d4:	430a      	orrs	r2, r1
 80031d6:	492a      	ldr	r1, [pc, #168]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	610b      	str	r3, [r1, #16]
 80031dc:	e027      	b.n	800322e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d112      	bne.n	800320a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031e4:	4b26      	ldr	r3, [pc, #152]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80031ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6892      	ldr	r2, [r2, #8]
 80031f4:	0211      	lsls	r1, r2, #8
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6912      	ldr	r2, [r2, #16]
 80031fa:	0852      	lsrs	r2, r2, #1
 80031fc:	3a01      	subs	r2, #1
 80031fe:	0552      	lsls	r2, r2, #21
 8003200:	430a      	orrs	r2, r1
 8003202:	491f      	ldr	r1, [pc, #124]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003204:	4313      	orrs	r3, r2
 8003206:	610b      	str	r3, [r1, #16]
 8003208:	e011      	b.n	800322e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800320a:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003212:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6892      	ldr	r2, [r2, #8]
 800321a:	0211      	lsls	r1, r2, #8
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6952      	ldr	r2, [r2, #20]
 8003220:	0852      	lsrs	r2, r2, #1
 8003222:	3a01      	subs	r2, #1
 8003224:	0652      	lsls	r2, r2, #25
 8003226:	430a      	orrs	r2, r1
 8003228:	4915      	ldr	r1, [pc, #84]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 800322a:	4313      	orrs	r3, r2
 800322c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800322e:	4b14      	ldr	r3, [pc, #80]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a13      	ldr	r2, [pc, #76]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003234:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003238:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323a:	f7fe fb41 	bl	80018c0 <HAL_GetTick>
 800323e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003240:	e009      	b.n	8003256 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003242:	f7fe fb3d 	bl	80018c0 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d902      	bls.n	8003256 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	73fb      	strb	r3, [r7, #15]
          break;
 8003254:	e005      	b.n	8003262 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0ef      	beq.n	8003242 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	4903      	ldr	r1, [pc, #12]	; (8003280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003272:	4313      	orrs	r3, r2
 8003274:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003276:	7bfb      	ldrb	r3, [r7, #15]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40021000 	.word	0x40021000

08003284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e049      	b.n	800332a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fe f868 	bl	8001380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3304      	adds	r3, #4
 80032c0:	4619      	mov	r1, r3
 80032c2:	4610      	mov	r0, r2
 80032c4:	f000 fd0c 	bl	8003ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	d001      	beq.n	800334c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e033      	b.n	80033b4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a19      	ldr	r2, [pc, #100]	; (80033c0 <HAL_TIM_Base_Start+0x8c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d009      	beq.n	8003372 <HAL_TIM_Base_Start+0x3e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003366:	d004      	beq.n	8003372 <HAL_TIM_Base_Start+0x3e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a15      	ldr	r2, [pc, #84]	; (80033c4 <HAL_TIM_Base_Start+0x90>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d115      	bne.n	800339e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <HAL_TIM_Base_Start+0x94>)
 800337a:	4013      	ands	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b06      	cmp	r3, #6
 8003382:	d015      	beq.n	80033b0 <HAL_TIM_Base_Start+0x7c>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338a:	d011      	beq.n	80033b0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339c:	e008      	b.n	80033b0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0201 	orr.w	r2, r2, #1
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	e000      	b.n	80033b2 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40014000 	.word	0x40014000
 80033c8:	00010007 	.word	0x00010007

080033cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e049      	b.n	8003472 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f841 	bl	800347a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3304      	adds	r3, #4
 8003408:	4619      	mov	r1, r3
 800340a:	4610      	mov	r0, r2
 800340c:	f000 fc68 	bl	8003ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d104      	bne.n	80034ae <HAL_TIM_IC_Start_IT+0x1e>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	e023      	b.n	80034f6 <HAL_TIM_IC_Start_IT+0x66>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d104      	bne.n	80034be <HAL_TIM_IC_Start_IT+0x2e>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	e01b      	b.n	80034f6 <HAL_TIM_IC_Start_IT+0x66>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d104      	bne.n	80034ce <HAL_TIM_IC_Start_IT+0x3e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	e013      	b.n	80034f6 <HAL_TIM_IC_Start_IT+0x66>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b0c      	cmp	r3, #12
 80034d2:	d104      	bne.n	80034de <HAL_TIM_IC_Start_IT+0x4e>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	e00b      	b.n	80034f6 <HAL_TIM_IC_Start_IT+0x66>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d104      	bne.n	80034ee <HAL_TIM_IC_Start_IT+0x5e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	e003      	b.n	80034f6 <HAL_TIM_IC_Start_IT+0x66>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d104      	bne.n	8003508 <HAL_TIM_IC_Start_IT+0x78>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003504:	b2db      	uxtb	r3, r3
 8003506:	e013      	b.n	8003530 <HAL_TIM_IC_Start_IT+0xa0>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b04      	cmp	r3, #4
 800350c:	d104      	bne.n	8003518 <HAL_TIM_IC_Start_IT+0x88>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003514:	b2db      	uxtb	r3, r3
 8003516:	e00b      	b.n	8003530 <HAL_TIM_IC_Start_IT+0xa0>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2b08      	cmp	r3, #8
 800351c:	d104      	bne.n	8003528 <HAL_TIM_IC_Start_IT+0x98>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003524:	b2db      	uxtb	r3, r3
 8003526:	e003      	b.n	8003530 <HAL_TIM_IC_Start_IT+0xa0>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800352e:	b2db      	uxtb	r3, r3
 8003530:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003532:	7bbb      	ldrb	r3, [r7, #14]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d102      	bne.n	800353e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003538:	7b7b      	ldrb	r3, [r7, #13]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d001      	beq.n	8003542 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e0c9      	b.n	80036d6 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d104      	bne.n	8003552 <HAL_TIM_IC_Start_IT+0xc2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003550:	e023      	b.n	800359a <HAL_TIM_IC_Start_IT+0x10a>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b04      	cmp	r3, #4
 8003556:	d104      	bne.n	8003562 <HAL_TIM_IC_Start_IT+0xd2>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003560:	e01b      	b.n	800359a <HAL_TIM_IC_Start_IT+0x10a>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b08      	cmp	r3, #8
 8003566:	d104      	bne.n	8003572 <HAL_TIM_IC_Start_IT+0xe2>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003570:	e013      	b.n	800359a <HAL_TIM_IC_Start_IT+0x10a>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b0c      	cmp	r3, #12
 8003576:	d104      	bne.n	8003582 <HAL_TIM_IC_Start_IT+0xf2>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003580:	e00b      	b.n	800359a <HAL_TIM_IC_Start_IT+0x10a>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b10      	cmp	r3, #16
 8003586:	d104      	bne.n	8003592 <HAL_TIM_IC_Start_IT+0x102>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003590:	e003      	b.n	800359a <HAL_TIM_IC_Start_IT+0x10a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2202      	movs	r2, #2
 8003596:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d104      	bne.n	80035aa <HAL_TIM_IC_Start_IT+0x11a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035a8:	e013      	b.n	80035d2 <HAL_TIM_IC_Start_IT+0x142>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d104      	bne.n	80035ba <HAL_TIM_IC_Start_IT+0x12a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035b8:	e00b      	b.n	80035d2 <HAL_TIM_IC_Start_IT+0x142>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d104      	bne.n	80035ca <HAL_TIM_IC_Start_IT+0x13a>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035c8:	e003      	b.n	80035d2 <HAL_TIM_IC_Start_IT+0x142>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2202      	movs	r2, #2
 80035ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b0c      	cmp	r3, #12
 80035d6:	d841      	bhi.n	800365c <HAL_TIM_IC_Start_IT+0x1cc>
 80035d8:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <HAL_TIM_IC_Start_IT+0x150>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	08003615 	.word	0x08003615
 80035e4:	0800365d 	.word	0x0800365d
 80035e8:	0800365d 	.word	0x0800365d
 80035ec:	0800365d 	.word	0x0800365d
 80035f0:	08003627 	.word	0x08003627
 80035f4:	0800365d 	.word	0x0800365d
 80035f8:	0800365d 	.word	0x0800365d
 80035fc:	0800365d 	.word	0x0800365d
 8003600:	08003639 	.word	0x08003639
 8003604:	0800365d 	.word	0x0800365d
 8003608:	0800365d 	.word	0x0800365d
 800360c:	0800365d 	.word	0x0800365d
 8003610:	0800364b 	.word	0x0800364b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0202 	orr.w	r2, r2, #2
 8003622:	60da      	str	r2, [r3, #12]
      break;
 8003624:	e01d      	b.n	8003662 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 0204 	orr.w	r2, r2, #4
 8003634:	60da      	str	r2, [r3, #12]
      break;
 8003636:	e014      	b.n	8003662 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0208 	orr.w	r2, r2, #8
 8003646:	60da      	str	r2, [r3, #12]
      break;
 8003648:	e00b      	b.n	8003662 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0210 	orr.w	r2, r2, #16
 8003658:	60da      	str	r2, [r3, #12]
      break;
 800365a:	e002      	b.n	8003662 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      break;
 8003660:	bf00      	nop
  }

  if (status == HAL_OK)
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d135      	bne.n	80036d4 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2201      	movs	r2, #1
 800366e:	6839      	ldr	r1, [r7, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fd3f 	bl	80040f4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a19      	ldr	r2, [pc, #100]	; (80036e0 <HAL_TIM_IC_Start_IT+0x250>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d009      	beq.n	8003694 <HAL_TIM_IC_Start_IT+0x204>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003688:	d004      	beq.n	8003694 <HAL_TIM_IC_Start_IT+0x204>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a15      	ldr	r2, [pc, #84]	; (80036e4 <HAL_TIM_IC_Start_IT+0x254>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d115      	bne.n	80036c0 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <HAL_TIM_IC_Start_IT+0x258>)
 800369c:	4013      	ands	r3, r2
 800369e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b06      	cmp	r3, #6
 80036a4:	d015      	beq.n	80036d2 <HAL_TIM_IC_Start_IT+0x242>
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ac:	d011      	beq.n	80036d2 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0201 	orr.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036be:	e008      	b.n	80036d2 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e000      	b.n	80036d4 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40012c00 	.word	0x40012c00
 80036e4:	40014000 	.word	0x40014000
 80036e8:	00010007 	.word	0x00010007

080036ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d122      	bne.n	8003748 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b02      	cmp	r3, #2
 800370e:	d11b      	bne.n	8003748 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0202 	mvn.w	r2, #2
 8003718:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fab8 	bl	8003ca4 <HAL_TIM_IC_CaptureCallback>
 8003734:	e005      	b.n	8003742 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 faaa 	bl	8003c90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fabb 	bl	8003cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b04      	cmp	r3, #4
 8003754:	d122      	bne.n	800379c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b04      	cmp	r3, #4
 8003762:	d11b      	bne.n	800379c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0204 	mvn.w	r2, #4
 800376c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2202      	movs	r2, #2
 8003772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fa8e 	bl	8003ca4 <HAL_TIM_IC_CaptureCallback>
 8003788:	e005      	b.n	8003796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fa80 	bl	8003c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 fa91 	bl	8003cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d122      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d11b      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0208 	mvn.w	r2, #8
 80037c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2204      	movs	r2, #4
 80037c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fa64 	bl	8003ca4 <HAL_TIM_IC_CaptureCallback>
 80037dc:	e005      	b.n	80037ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 fa56 	bl	8003c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 fa67 	bl	8003cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b10      	cmp	r3, #16
 80037fc:	d122      	bne.n	8003844 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b10      	cmp	r3, #16
 800380a:	d11b      	bne.n	8003844 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f06f 0210 	mvn.w	r2, #16
 8003814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2208      	movs	r2, #8
 800381a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fa3a 	bl	8003ca4 <HAL_TIM_IC_CaptureCallback>
 8003830:	e005      	b.n	800383e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fa2c 	bl	8003c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fa3d 	bl	8003cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b01      	cmp	r3, #1
 8003850:	d10e      	bne.n	8003870 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b01      	cmp	r3, #1
 800385e:	d107      	bne.n	8003870 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0201 	mvn.w	r2, #1
 8003868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fa06 	bl	8003c7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387a:	2b80      	cmp	r3, #128	; 0x80
 800387c:	d10e      	bne.n	800389c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003888:	2b80      	cmp	r3, #128	; 0x80
 800388a:	d107      	bne.n	800389c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fcc2 	bl	8004220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038aa:	d10e      	bne.n	80038ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b6:	2b80      	cmp	r3, #128	; 0x80
 80038b8:	d107      	bne.n	80038ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 fcb5 	bl	8004234 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d4:	2b40      	cmp	r3, #64	; 0x40
 80038d6:	d10e      	bne.n	80038f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e2:	2b40      	cmp	r3, #64	; 0x40
 80038e4:	d107      	bne.n	80038f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f9eb 	bl	8003ccc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b20      	cmp	r3, #32
 8003902:	d10e      	bne.n	8003922 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b20      	cmp	r3, #32
 8003910:	d107      	bne.n	8003922 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f06f 0220 	mvn.w	r2, #32
 800391a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fc75 	bl	800420c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b086      	sub	sp, #24
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003944:	2302      	movs	r3, #2
 8003946:	e088      	b.n	8003a5a <HAL_TIM_IC_ConfigChannel+0x130>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d11b      	bne.n	800398e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	6819      	ldr	r1, [r3, #0]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f000 fa1f 	bl	8003da8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699a      	ldr	r2, [r3, #24]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 020c 	bic.w	r2, r2, #12
 8003978:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6999      	ldr	r1, [r3, #24]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	619a      	str	r2, [r3, #24]
 800398c:	e060      	b.n	8003a50 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b04      	cmp	r3, #4
 8003992:	d11c      	bne.n	80039ce <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	6819      	ldr	r1, [r3, #0]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f000 fa85 	bl	8003eb2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039b6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6999      	ldr	r1, [r3, #24]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	021a      	lsls	r2, r3, #8
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	619a      	str	r2, [r3, #24]
 80039cc:	e040      	b.n	8003a50 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d11b      	bne.n	8003a0c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	6819      	ldr	r1, [r3, #0]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f000 fad2 	bl	8003f8c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	69da      	ldr	r2, [r3, #28]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 020c 	bic.w	r2, r2, #12
 80039f6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69d9      	ldr	r1, [r3, #28]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	61da      	str	r2, [r3, #28]
 8003a0a:	e021      	b.n	8003a50 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b0c      	cmp	r3, #12
 8003a10:	d11c      	bne.n	8003a4c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	6819      	ldr	r1, [r3, #0]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f000 faef 	bl	8004004 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69da      	ldr	r2, [r3, #28]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a34:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69d9      	ldr	r1, [r3, #28]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	021a      	lsls	r2, r3, #8
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	61da      	str	r2, [r3, #28]
 8003a4a:	e001      	b.n	8003a50 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_TIM_ConfigClockSource+0x1c>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e0b6      	b.n	8003bec <HAL_TIM_ConfigClockSource+0x18a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003aa0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aa8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aba:	d03e      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0xd8>
 8003abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac0:	f200 8087 	bhi.w	8003bd2 <HAL_TIM_ConfigClockSource+0x170>
 8003ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac8:	f000 8086 	beq.w	8003bd8 <HAL_TIM_ConfigClockSource+0x176>
 8003acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad0:	d87f      	bhi.n	8003bd2 <HAL_TIM_ConfigClockSource+0x170>
 8003ad2:	2b70      	cmp	r3, #112	; 0x70
 8003ad4:	d01a      	beq.n	8003b0c <HAL_TIM_ConfigClockSource+0xaa>
 8003ad6:	2b70      	cmp	r3, #112	; 0x70
 8003ad8:	d87b      	bhi.n	8003bd2 <HAL_TIM_ConfigClockSource+0x170>
 8003ada:	2b60      	cmp	r3, #96	; 0x60
 8003adc:	d050      	beq.n	8003b80 <HAL_TIM_ConfigClockSource+0x11e>
 8003ade:	2b60      	cmp	r3, #96	; 0x60
 8003ae0:	d877      	bhi.n	8003bd2 <HAL_TIM_ConfigClockSource+0x170>
 8003ae2:	2b50      	cmp	r3, #80	; 0x50
 8003ae4:	d03c      	beq.n	8003b60 <HAL_TIM_ConfigClockSource+0xfe>
 8003ae6:	2b50      	cmp	r3, #80	; 0x50
 8003ae8:	d873      	bhi.n	8003bd2 <HAL_TIM_ConfigClockSource+0x170>
 8003aea:	2b40      	cmp	r3, #64	; 0x40
 8003aec:	d058      	beq.n	8003ba0 <HAL_TIM_ConfigClockSource+0x13e>
 8003aee:	2b40      	cmp	r3, #64	; 0x40
 8003af0:	d86f      	bhi.n	8003bd2 <HAL_TIM_ConfigClockSource+0x170>
 8003af2:	2b30      	cmp	r3, #48	; 0x30
 8003af4:	d064      	beq.n	8003bc0 <HAL_TIM_ConfigClockSource+0x15e>
 8003af6:	2b30      	cmp	r3, #48	; 0x30
 8003af8:	d86b      	bhi.n	8003bd2 <HAL_TIM_ConfigClockSource+0x170>
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d060      	beq.n	8003bc0 <HAL_TIM_ConfigClockSource+0x15e>
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	d867      	bhi.n	8003bd2 <HAL_TIM_ConfigClockSource+0x170>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d05c      	beq.n	8003bc0 <HAL_TIM_ConfigClockSource+0x15e>
 8003b06:	2b10      	cmp	r3, #16
 8003b08:	d05a      	beq.n	8003bc0 <HAL_TIM_ConfigClockSource+0x15e>
 8003b0a:	e062      	b.n	8003bd2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	6899      	ldr	r1, [r3, #8]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f000 faca 	bl	80040b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b2e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	609a      	str	r2, [r3, #8]
      break;
 8003b38:	e04f      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	6899      	ldr	r1, [r3, #8]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f000 fab3 	bl	80040b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b5c:	609a      	str	r2, [r3, #8]
      break;
 8003b5e:	e03c      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	6859      	ldr	r1, [r3, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f000 f971 	bl	8003e54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2150      	movs	r1, #80	; 0x50
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fa80 	bl	800407e <TIM_ITRx_SetConfig>
      break;
 8003b7e:	e02c      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6818      	ldr	r0, [r3, #0]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	6859      	ldr	r1, [r3, #4]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	f000 f9cd 	bl	8003f2c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2160      	movs	r1, #96	; 0x60
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fa70 	bl	800407e <TIM_ITRx_SetConfig>
      break;
 8003b9e:	e01c      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	6859      	ldr	r1, [r3, #4]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	461a      	mov	r2, r3
 8003bae:	f000 f951 	bl	8003e54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2140      	movs	r1, #64	; 0x40
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fa60 	bl	800407e <TIM_ITRx_SetConfig>
      break;
 8003bbe:	e00c      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	f000 fa57 	bl	800407e <TIM_ITRx_SetConfig>
      break;
 8003bd0:	e003      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd6:	e000      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003bd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b0c      	cmp	r3, #12
 8003c06:	d831      	bhi.n	8003c6c <HAL_TIM_ReadCapturedValue+0x78>
 8003c08:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0e:	bf00      	nop
 8003c10:	08003c45 	.word	0x08003c45
 8003c14:	08003c6d 	.word	0x08003c6d
 8003c18:	08003c6d 	.word	0x08003c6d
 8003c1c:	08003c6d 	.word	0x08003c6d
 8003c20:	08003c4f 	.word	0x08003c4f
 8003c24:	08003c6d 	.word	0x08003c6d
 8003c28:	08003c6d 	.word	0x08003c6d
 8003c2c:	08003c6d 	.word	0x08003c6d
 8003c30:	08003c59 	.word	0x08003c59
 8003c34:	08003c6d 	.word	0x08003c6d
 8003c38:	08003c6d 	.word	0x08003c6d
 8003c3c:	08003c6d 	.word	0x08003c6d
 8003c40:	08003c63 	.word	0x08003c63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4a:	60fb      	str	r3, [r7, #12]

      break;
 8003c4c:	e00f      	b.n	8003c6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	60fb      	str	r3, [r7, #12]

      break;
 8003c56:	e00a      	b.n	8003c6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5e:	60fb      	str	r3, [r7, #12]

      break;
 8003c60:	e005      	b.n	8003c6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	60fb      	str	r3, [r7, #12]

      break;
 8003c6a:	e000      	b.n	8003c6e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003c6c:	bf00      	nop
  }

  return tmpreg;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a2a      	ldr	r2, [pc, #168]	; (8003d9c <TIM_Base_SetConfig+0xbc>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d003      	beq.n	8003d00 <TIM_Base_SetConfig+0x20>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cfe:	d108      	bne.n	8003d12 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a21      	ldr	r2, [pc, #132]	; (8003d9c <TIM_Base_SetConfig+0xbc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00b      	beq.n	8003d32 <TIM_Base_SetConfig+0x52>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d20:	d007      	beq.n	8003d32 <TIM_Base_SetConfig+0x52>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a1e      	ldr	r2, [pc, #120]	; (8003da0 <TIM_Base_SetConfig+0xc0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d003      	beq.n	8003d32 <TIM_Base_SetConfig+0x52>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a1d      	ldr	r2, [pc, #116]	; (8003da4 <TIM_Base_SetConfig+0xc4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d108      	bne.n	8003d44 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a0c      	ldr	r2, [pc, #48]	; (8003d9c <TIM_Base_SetConfig+0xbc>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d007      	beq.n	8003d80 <TIM_Base_SetConfig+0xa0>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a0b      	ldr	r2, [pc, #44]	; (8003da0 <TIM_Base_SetConfig+0xc0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d003      	beq.n	8003d80 <TIM_Base_SetConfig+0xa0>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a0a      	ldr	r2, [pc, #40]	; (8003da4 <TIM_Base_SetConfig+0xc4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d103      	bne.n	8003d88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	615a      	str	r2, [r3, #20]
}
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40012c00 	.word	0x40012c00
 8003da0:	40014000 	.word	0x40014000
 8003da4:	40014400 	.word	0x40014400

08003da8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f023 0201 	bic.w	r2, r3, #1
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a1e      	ldr	r2, [pc, #120]	; (8003e4c <TIM_TI1_SetConfig+0xa4>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d007      	beq.n	8003de6 <TIM_TI1_SetConfig+0x3e>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ddc:	d003      	beq.n	8003de6 <TIM_TI1_SetConfig+0x3e>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4a1b      	ldr	r2, [pc, #108]	; (8003e50 <TIM_TI1_SetConfig+0xa8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d101      	bne.n	8003dea <TIM_TI1_SetConfig+0x42>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <TIM_TI1_SetConfig+0x44>
 8003dea:	2300      	movs	r3, #0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f023 0303 	bic.w	r3, r3, #3
 8003df6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	e003      	b.n	8003e0a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f023 030a 	bic.w	r3, r3, #10
 8003e24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f003 030a 	and.w	r3, r3, #10
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	621a      	str	r2, [r3, #32]
}
 8003e3e:	bf00      	nop
 8003e40:	371c      	adds	r7, #28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40012c00 	.word	0x40012c00
 8003e50:	40014000 	.word	0x40014000

08003e54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	f023 0201 	bic.w	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f023 030a 	bic.w	r3, r3, #10
 8003e90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	621a      	str	r2, [r3, #32]
}
 8003ea6:	bf00      	nop
 8003ea8:	371c      	adds	r7, #28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b087      	sub	sp, #28
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	607a      	str	r2, [r7, #4]
 8003ebe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	f023 0210 	bic.w	r2, r3, #16
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ede:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ef0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	031b      	lsls	r3, r3, #12
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f04:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	621a      	str	r2, [r3, #32]
}
 8003f20:	bf00      	nop
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	f023 0210 	bic.w	r2, r3, #16
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	031b      	lsls	r3, r3, #12
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	621a      	str	r2, [r3, #32]
}
 8003f80:	bf00      	nop
 8003f82:	371c      	adds	r7, #28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f023 0303 	bic.w	r3, r3, #3
 8003fb8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fc8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003fdc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	021b      	lsls	r3, r3, #8
 8003fe2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	621a      	str	r2, [r3, #32]
}
 8003ff8:	bf00      	nop
 8003ffa:	371c      	adds	r7, #28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004030:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4313      	orrs	r3, r2
 800403a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004042:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	031b      	lsls	r3, r3, #12
 8004048:	b29b      	uxth	r3, r3
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004056:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	031b      	lsls	r3, r3, #12
 800405c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	621a      	str	r2, [r3, #32]
}
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800407e:	b480      	push	{r7}
 8004080:	b085      	sub	sp, #20
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004094:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	f043 0307 	orr.w	r3, r3, #7
 80040a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	609a      	str	r2, [r3, #8]
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	021a      	lsls	r2, r3, #8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4313      	orrs	r3, r2
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	609a      	str	r2, [r3, #8]
}
 80040e8:	bf00      	nop
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 031f 	and.w	r3, r3, #31
 8004106:	2201      	movs	r2, #1
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a1a      	ldr	r2, [r3, #32]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	43db      	mvns	r3, r3
 8004116:	401a      	ands	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a1a      	ldr	r2, [r3, #32]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	fa01 f303 	lsl.w	r3, r1, r3
 800412c:	431a      	orrs	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
	...

08004140 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004154:	2302      	movs	r3, #2
 8004156:	e04f      	b.n	80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a21      	ldr	r2, [pc, #132]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d108      	bne.n	8004194 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004188:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4313      	orrs	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a14      	ldr	r2, [pc, #80]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d009      	beq.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c0:	d004      	beq.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a10      	ldr	r2, [pc, #64]	; (8004208 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d10c      	bne.n	80041e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	40012c00 	.word	0x40012c00
 8004208:	40014000 	.word	0x40014000

0800420c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e040      	b.n	80042dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fd f8ec 	bl	8001448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2224      	movs	r2, #36	; 0x24
 8004274:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0201 	bic.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fc18 	bl	8004abc <UART_SetConfig>
 800428c:	4603      	mov	r3, r0
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e022      	b.n	80042dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fe16 	bl	8004ed0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fe9d 	bl	8005014 <UART_CheckIdleState>
 80042da:	4603      	mov	r3, r0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08a      	sub	sp, #40	; 0x28
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	4613      	mov	r3, r2
 80042f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	f040 8082 	bne.w	8004402 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <HAL_UART_Transmit+0x26>
 8004304:	88fb      	ldrh	r3, [r7, #6]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e07a      	b.n	8004404 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_UART_Transmit+0x38>
 8004318:	2302      	movs	r3, #2
 800431a:	e073      	b.n	8004404 <HAL_UART_Transmit+0x120>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2221      	movs	r2, #33	; 0x21
 8004330:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004332:	f7fd fac5 	bl	80018c0 <HAL_GetTick>
 8004336:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	88fa      	ldrh	r2, [r7, #6]
 800433c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	88fa      	ldrh	r2, [r7, #6]
 8004344:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004350:	d108      	bne.n	8004364 <HAL_UART_Transmit+0x80>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d104      	bne.n	8004364 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800435a:	2300      	movs	r3, #0
 800435c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	e003      	b.n	800436c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004368:	2300      	movs	r3, #0
 800436a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004374:	e02d      	b.n	80043d2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2200      	movs	r2, #0
 800437e:	2180      	movs	r1, #128	; 0x80
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 fe90 	bl	80050a6 <UART_WaitOnFlagUntilTimeout>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e039      	b.n	8004404 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10b      	bne.n	80043ae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	881a      	ldrh	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043a2:	b292      	uxth	r2, r2
 80043a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	3302      	adds	r3, #2
 80043aa:	61bb      	str	r3, [r7, #24]
 80043ac:	e008      	b.n	80043c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	781a      	ldrb	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	b292      	uxth	r2, r2
 80043b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	3301      	adds	r3, #1
 80043be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1cb      	bne.n	8004376 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2200      	movs	r2, #0
 80043e6:	2140      	movs	r1, #64	; 0x40
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f000 fe5c 	bl	80050a6 <UART_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e005      	b.n	8004404 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e000      	b.n	8004404 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004402:	2302      	movs	r3, #2
  }
}
 8004404:	4618      	mov	r0, r3
 8004406:	3720      	adds	r7, #32
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	; 0x28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	4613      	mov	r3, r2
 8004418:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800441e:	2b20      	cmp	r3, #32
 8004420:	d142      	bne.n	80044a8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <HAL_UART_Receive_IT+0x22>
 8004428:	88fb      	ldrh	r3, [r7, #6]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e03b      	b.n	80044aa <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_UART_Receive_IT+0x34>
 800443c:	2302      	movs	r3, #2
 800443e:	e034      	b.n	80044aa <HAL_UART_Receive_IT+0x9e>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a18      	ldr	r2, [pc, #96]	; (80044b4 <HAL_UART_Receive_IT+0xa8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d01f      	beq.n	8004498 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d018      	beq.n	8004498 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	e853 3f00 	ldrex	r3, [r3]
 8004472:	613b      	str	r3, [r7, #16]
   return(result);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	623b      	str	r3, [r7, #32]
 8004486:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004488:	69f9      	ldr	r1, [r7, #28]
 800448a:	6a3a      	ldr	r2, [r7, #32]
 800448c:	e841 2300 	strex	r3, r2, [r1]
 8004490:	61bb      	str	r3, [r7, #24]
   return(result);
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e6      	bne.n	8004466 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	461a      	mov	r2, r3
 800449c:	68b9      	ldr	r1, [r7, #8]
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 fec6 	bl	8005230 <UART_Start_Receive_IT>
 80044a4:	4603      	mov	r3, r0
 80044a6:	e000      	b.n	80044aa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80044a8:	2302      	movs	r3, #2
  }
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3728      	adds	r7, #40	; 0x28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40008000 	.word	0x40008000

080044b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b0ba      	sub	sp, #232	; 0xe8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80044e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80044e6:	4013      	ands	r3, r2
 80044e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80044ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d115      	bne.n	8004520 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80044f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00f      	beq.n	8004520 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	d009      	beq.n	8004520 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 82a6 	beq.w	8004a62 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
      }
      return;
 800451e:	e2a0      	b.n	8004a62 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004520:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8117 	beq.w	8004758 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800452a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004536:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800453a:	4b85      	ldr	r3, [pc, #532]	; (8004750 <HAL_UART_IRQHandler+0x298>)
 800453c:	4013      	ands	r3, r2
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 810a 	beq.w	8004758 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d011      	beq.n	8004574 <HAL_UART_IRQHandler+0xbc>
 8004550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00b      	beq.n	8004574 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2201      	movs	r2, #1
 8004562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800456a:	f043 0201 	orr.w	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d011      	beq.n	80045a4 <HAL_UART_IRQHandler+0xec>
 8004580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00b      	beq.n	80045a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2202      	movs	r2, #2
 8004592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800459a:	f043 0204 	orr.w	r2, r3, #4
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d011      	beq.n	80045d4 <HAL_UART_IRQHandler+0x11c>
 80045b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00b      	beq.n	80045d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2204      	movs	r2, #4
 80045c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ca:	f043 0202 	orr.w	r2, r3, #2
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d017      	beq.n	8004610 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d105      	bne.n	80045f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00b      	beq.n	8004610 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2208      	movs	r2, #8
 80045fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004606:	f043 0208 	orr.w	r2, r3, #8
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004618:	2b00      	cmp	r3, #0
 800461a:	d012      	beq.n	8004642 <HAL_UART_IRQHandler+0x18a>
 800461c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004620:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00c      	beq.n	8004642 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004630:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004638:	f043 0220 	orr.w	r2, r3, #32
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 820c 	beq.w	8004a66 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800464e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00d      	beq.n	8004676 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800465a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	2b00      	cmp	r3, #0
 8004664:	d007      	beq.n	8004676 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800467c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b40      	cmp	r3, #64	; 0x40
 800468c:	d005      	beq.n	800469a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800468e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004692:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004696:	2b00      	cmp	r3, #0
 8004698:	d04f      	beq.n	800473a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fe92 	bl	80053c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046aa:	2b40      	cmp	r3, #64	; 0x40
 80046ac:	d141      	bne.n	8004732 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3308      	adds	r3, #8
 80046b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3308      	adds	r3, #8
 80046d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1d9      	bne.n	80046ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d013      	beq.n	800472a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	4a13      	ldr	r2, [pc, #76]	; (8004754 <HAL_UART_IRQHandler+0x29c>)
 8004708:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470e:	4618      	mov	r0, r3
 8004710:	f7fd fa55 	bl	8001bbe <HAL_DMA_Abort_IT>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d017      	beq.n	800474a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004724:	4610      	mov	r0, r2
 8004726:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004728:	e00f      	b.n	800474a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f9b0 	bl	8004a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004730:	e00b      	b.n	800474a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f9ac 	bl	8004a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	e007      	b.n	800474a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f9a8 	bl	8004a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004748:	e18d      	b.n	8004a66 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800474a:	bf00      	nop
    return;
 800474c:	e18b      	b.n	8004a66 <HAL_UART_IRQHandler+0x5ae>
 800474e:	bf00      	nop
 8004750:	04000120 	.word	0x04000120
 8004754:	0800548b 	.word	0x0800548b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475c:	2b01      	cmp	r3, #1
 800475e:	f040 8146 	bne.w	80049ee <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004766:	f003 0310 	and.w	r3, r3, #16
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 813f 	beq.w	80049ee <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004774:	f003 0310 	and.w	r3, r3, #16
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8138 	beq.w	80049ee <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2210      	movs	r2, #16
 8004784:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004790:	2b40      	cmp	r3, #64	; 0x40
 8004792:	f040 80b4 	bne.w	80048fe <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 815f 	beq.w	8004a6a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047b6:	429a      	cmp	r2, r3
 80047b8:	f080 8157 	bcs.w	8004a6a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f040 8085 	bne.w	80048e2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004802:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004806:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800480e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800481a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1da      	bne.n	80047d8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3308      	adds	r3, #8
 8004828:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004832:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004834:	f023 0301 	bic.w	r3, r3, #1
 8004838:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3308      	adds	r3, #8
 8004842:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004846:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800484a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800484e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004852:	e841 2300 	strex	r3, r2, [r1]
 8004856:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1e1      	bne.n	8004822 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3308      	adds	r3, #8
 8004864:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800486e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004874:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3308      	adds	r3, #8
 800487e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004882:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004884:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004888:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e3      	bne.n	800485e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048aa:	e853 3f00 	ldrex	r3, [r3]
 80048ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b2:	f023 0310 	bic.w	r3, r3, #16
 80048b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80048c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e4      	bne.n	80048a2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fd f930 	bl	8001b42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	4619      	mov	r1, r3
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f8d4 	bl	8004aa4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048fc:	e0b5      	b.n	8004a6a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800490a:	b29b      	uxth	r3, r3
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 80a7 	beq.w	8004a6e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 80a2 	beq.w	8004a6e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004932:	e853 3f00 	ldrex	r3, [r3]
 8004936:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800493e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800494c:	647b      	str	r3, [r7, #68]	; 0x44
 800494e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004952:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800495a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e4      	bne.n	800492a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3308      	adds	r3, #8
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	623b      	str	r3, [r7, #32]
   return(result);
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	f023 0301 	bic.w	r3, r3, #1
 8004976:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3308      	adds	r3, #8
 8004980:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004984:	633a      	str	r2, [r7, #48]	; 0x30
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004988:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800498a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800498c:	e841 2300 	strex	r3, r2, [r1]
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e3      	bne.n	8004960 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0310 	bic.w	r3, r3, #16
 80049be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049cc:	61fb      	str	r3, [r7, #28]
 80049ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d0:	69b9      	ldr	r1, [r7, #24]
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	e841 2300 	strex	r3, r2, [r1]
 80049d8:	617b      	str	r3, [r7, #20]
   return(result);
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1e4      	bne.n	80049aa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049e4:	4619      	mov	r1, r3
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f85c 	bl	8004aa4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049ec:	e03f      	b.n	8004a6e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80049ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00e      	beq.n	8004a18 <HAL_UART_IRQHandler+0x560>
 80049fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d008      	beq.n	8004a18 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 feda 	bl	80057ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a16:	e02d      	b.n	8004a74 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00e      	beq.n	8004a42 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d008      	beq.n	8004a42 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01c      	beq.n	8004a72 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	4798      	blx	r3
    }
    return;
 8004a40:	e017      	b.n	8004a72 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d012      	beq.n	8004a74 <HAL_UART_IRQHandler+0x5bc>
 8004a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00c      	beq.n	8004a74 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fd2b 	bl	80054b6 <UART_EndTransmit_IT>
    return;
 8004a60:	e008      	b.n	8004a74 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004a62:	bf00      	nop
 8004a64:	e006      	b.n	8004a74 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004a66:	bf00      	nop
 8004a68:	e004      	b.n	8004a74 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004a6a:	bf00      	nop
 8004a6c:	e002      	b.n	8004a74 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004a6e:	bf00      	nop
 8004a70:	e000      	b.n	8004a74 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004a72:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004a74:	37e8      	adds	r7, #232	; 0xe8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop

08004a7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004abc:	b5b0      	push	{r4, r5, r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4baf      	ldr	r3, [pc, #700]	; (8004da4 <UART_SetConfig+0x2e8>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6812      	ldr	r2, [r2, #0]
 8004aee:	69f9      	ldr	r1, [r7, #28]
 8004af0:	430b      	orrs	r3, r1
 8004af2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4aa4      	ldr	r2, [pc, #656]	; (8004da8 <UART_SetConfig+0x2ec>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d004      	beq.n	8004b24 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	69fa      	ldr	r2, [r7, #28]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a9b      	ldr	r2, [pc, #620]	; (8004dac <UART_SetConfig+0x2f0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d121      	bne.n	8004b86 <UART_SetConfig+0xca>
 8004b42:	4b9b      	ldr	r3, [pc, #620]	; (8004db0 <UART_SetConfig+0x2f4>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b48:	f003 0303 	and.w	r3, r3, #3
 8004b4c:	2b03      	cmp	r3, #3
 8004b4e:	d817      	bhi.n	8004b80 <UART_SetConfig+0xc4>
 8004b50:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <UART_SetConfig+0x9c>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004b69 	.word	0x08004b69
 8004b5c:	08004b75 	.word	0x08004b75
 8004b60:	08004b6f 	.word	0x08004b6f
 8004b64:	08004b7b 	.word	0x08004b7b
 8004b68:	2301      	movs	r3, #1
 8004b6a:	76fb      	strb	r3, [r7, #27]
 8004b6c:	e070      	b.n	8004c50 <UART_SetConfig+0x194>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	76fb      	strb	r3, [r7, #27]
 8004b72:	e06d      	b.n	8004c50 <UART_SetConfig+0x194>
 8004b74:	2304      	movs	r3, #4
 8004b76:	76fb      	strb	r3, [r7, #27]
 8004b78:	e06a      	b.n	8004c50 <UART_SetConfig+0x194>
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	76fb      	strb	r3, [r7, #27]
 8004b7e:	e067      	b.n	8004c50 <UART_SetConfig+0x194>
 8004b80:	2310      	movs	r3, #16
 8004b82:	76fb      	strb	r3, [r7, #27]
 8004b84:	e064      	b.n	8004c50 <UART_SetConfig+0x194>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a8a      	ldr	r2, [pc, #552]	; (8004db4 <UART_SetConfig+0x2f8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d132      	bne.n	8004bf6 <UART_SetConfig+0x13a>
 8004b90:	4b87      	ldr	r3, [pc, #540]	; (8004db0 <UART_SetConfig+0x2f4>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b96:	f003 030c 	and.w	r3, r3, #12
 8004b9a:	2b0c      	cmp	r3, #12
 8004b9c:	d828      	bhi.n	8004bf0 <UART_SetConfig+0x134>
 8004b9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <UART_SetConfig+0xe8>)
 8004ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba4:	08004bd9 	.word	0x08004bd9
 8004ba8:	08004bf1 	.word	0x08004bf1
 8004bac:	08004bf1 	.word	0x08004bf1
 8004bb0:	08004bf1 	.word	0x08004bf1
 8004bb4:	08004be5 	.word	0x08004be5
 8004bb8:	08004bf1 	.word	0x08004bf1
 8004bbc:	08004bf1 	.word	0x08004bf1
 8004bc0:	08004bf1 	.word	0x08004bf1
 8004bc4:	08004bdf 	.word	0x08004bdf
 8004bc8:	08004bf1 	.word	0x08004bf1
 8004bcc:	08004bf1 	.word	0x08004bf1
 8004bd0:	08004bf1 	.word	0x08004bf1
 8004bd4:	08004beb 	.word	0x08004beb
 8004bd8:	2300      	movs	r3, #0
 8004bda:	76fb      	strb	r3, [r7, #27]
 8004bdc:	e038      	b.n	8004c50 <UART_SetConfig+0x194>
 8004bde:	2302      	movs	r3, #2
 8004be0:	76fb      	strb	r3, [r7, #27]
 8004be2:	e035      	b.n	8004c50 <UART_SetConfig+0x194>
 8004be4:	2304      	movs	r3, #4
 8004be6:	76fb      	strb	r3, [r7, #27]
 8004be8:	e032      	b.n	8004c50 <UART_SetConfig+0x194>
 8004bea:	2308      	movs	r3, #8
 8004bec:	76fb      	strb	r3, [r7, #27]
 8004bee:	e02f      	b.n	8004c50 <UART_SetConfig+0x194>
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	76fb      	strb	r3, [r7, #27]
 8004bf4:	e02c      	b.n	8004c50 <UART_SetConfig+0x194>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a6b      	ldr	r2, [pc, #428]	; (8004da8 <UART_SetConfig+0x2ec>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d125      	bne.n	8004c4c <UART_SetConfig+0x190>
 8004c00:	4b6b      	ldr	r3, [pc, #428]	; (8004db0 <UART_SetConfig+0x2f4>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c0e:	d017      	beq.n	8004c40 <UART_SetConfig+0x184>
 8004c10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c14:	d817      	bhi.n	8004c46 <UART_SetConfig+0x18a>
 8004c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c1a:	d00b      	beq.n	8004c34 <UART_SetConfig+0x178>
 8004c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c20:	d811      	bhi.n	8004c46 <UART_SetConfig+0x18a>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <UART_SetConfig+0x172>
 8004c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c2a:	d006      	beq.n	8004c3a <UART_SetConfig+0x17e>
 8004c2c:	e00b      	b.n	8004c46 <UART_SetConfig+0x18a>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	76fb      	strb	r3, [r7, #27]
 8004c32:	e00d      	b.n	8004c50 <UART_SetConfig+0x194>
 8004c34:	2302      	movs	r3, #2
 8004c36:	76fb      	strb	r3, [r7, #27]
 8004c38:	e00a      	b.n	8004c50 <UART_SetConfig+0x194>
 8004c3a:	2304      	movs	r3, #4
 8004c3c:	76fb      	strb	r3, [r7, #27]
 8004c3e:	e007      	b.n	8004c50 <UART_SetConfig+0x194>
 8004c40:	2308      	movs	r3, #8
 8004c42:	76fb      	strb	r3, [r7, #27]
 8004c44:	e004      	b.n	8004c50 <UART_SetConfig+0x194>
 8004c46:	2310      	movs	r3, #16
 8004c48:	76fb      	strb	r3, [r7, #27]
 8004c4a:	e001      	b.n	8004c50 <UART_SetConfig+0x194>
 8004c4c:	2310      	movs	r3, #16
 8004c4e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a54      	ldr	r2, [pc, #336]	; (8004da8 <UART_SetConfig+0x2ec>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d173      	bne.n	8004d42 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c5a:	7efb      	ldrb	r3, [r7, #27]
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d824      	bhi.n	8004caa <UART_SetConfig+0x1ee>
 8004c60:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <UART_SetConfig+0x1ac>)
 8004c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c66:	bf00      	nop
 8004c68:	08004c8d 	.word	0x08004c8d
 8004c6c:	08004cab 	.word	0x08004cab
 8004c70:	08004c95 	.word	0x08004c95
 8004c74:	08004cab 	.word	0x08004cab
 8004c78:	08004c9b 	.word	0x08004c9b
 8004c7c:	08004cab 	.word	0x08004cab
 8004c80:	08004cab 	.word	0x08004cab
 8004c84:	08004cab 	.word	0x08004cab
 8004c88:	08004ca3 	.word	0x08004ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c8c:	f7fd ff78 	bl	8002b80 <HAL_RCC_GetPCLK1Freq>
 8004c90:	6178      	str	r0, [r7, #20]
        break;
 8004c92:	e00f      	b.n	8004cb4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c94:	4b48      	ldr	r3, [pc, #288]	; (8004db8 <UART_SetConfig+0x2fc>)
 8004c96:	617b      	str	r3, [r7, #20]
        break;
 8004c98:	e00c      	b.n	8004cb4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c9a:	f7fd fed9 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 8004c9e:	6178      	str	r0, [r7, #20]
        break;
 8004ca0:	e008      	b.n	8004cb4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ca6:	617b      	str	r3, [r7, #20]
        break;
 8004ca8:	e004      	b.n	8004cb4 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	76bb      	strb	r3, [r7, #26]
        break;
 8004cb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 80fc 	beq.w	8004eb4 <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	4413      	add	r3, r2
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d305      	bcc.n	8004cd8 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d902      	bls.n	8004cde <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	76bb      	strb	r3, [r7, #26]
 8004cdc:	e0ea      	b.n	8004eb4 <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f04f 0100 	mov.w	r1, #0
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	020b      	lsls	r3, r1, #8
 8004cf0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cf4:	0202      	lsls	r2, r0, #8
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	6849      	ldr	r1, [r1, #4]
 8004cfa:	0849      	lsrs	r1, r1, #1
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	f04f 0100 	mov.w	r1, #0
 8004d02:	1814      	adds	r4, r2, r0
 8004d04:	eb43 0501 	adc.w	r5, r3, r1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	4620      	mov	r0, r4
 8004d14:	4629      	mov	r1, r5
 8004d16:	f7fb fea1 	bl	8000a5c <__aeabi_uldivmod>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4613      	mov	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d28:	d308      	bcc.n	8004d3c <UART_SetConfig+0x280>
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d30:	d204      	bcs.n	8004d3c <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	60da      	str	r2, [r3, #12]
 8004d3a:	e0bb      	b.n	8004eb4 <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	76bb      	strb	r3, [r7, #26]
 8004d40:	e0b8      	b.n	8004eb4 <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d4a:	d167      	bne.n	8004e1c <UART_SetConfig+0x360>
  {
    switch (clocksource)
 8004d4c:	7efb      	ldrb	r3, [r7, #27]
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d834      	bhi.n	8004dbc <UART_SetConfig+0x300>
 8004d52:	a201      	add	r2, pc, #4	; (adr r2, 8004d58 <UART_SetConfig+0x29c>)
 8004d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d58:	08004d7d 	.word	0x08004d7d
 8004d5c:	08004d85 	.word	0x08004d85
 8004d60:	08004d8d 	.word	0x08004d8d
 8004d64:	08004dbd 	.word	0x08004dbd
 8004d68:	08004d93 	.word	0x08004d93
 8004d6c:	08004dbd 	.word	0x08004dbd
 8004d70:	08004dbd 	.word	0x08004dbd
 8004d74:	08004dbd 	.word	0x08004dbd
 8004d78:	08004d9b 	.word	0x08004d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d7c:	f7fd ff00 	bl	8002b80 <HAL_RCC_GetPCLK1Freq>
 8004d80:	6178      	str	r0, [r7, #20]
        break;
 8004d82:	e020      	b.n	8004dc6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d84:	f7fd ff12 	bl	8002bac <HAL_RCC_GetPCLK2Freq>
 8004d88:	6178      	str	r0, [r7, #20]
        break;
 8004d8a:	e01c      	b.n	8004dc6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <UART_SetConfig+0x2fc>)
 8004d8e:	617b      	str	r3, [r7, #20]
        break;
 8004d90:	e019      	b.n	8004dc6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d92:	f7fd fe5d 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 8004d96:	6178      	str	r0, [r7, #20]
        break;
 8004d98:	e015      	b.n	8004dc6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d9e:	617b      	str	r3, [r7, #20]
        break;
 8004da0:	e011      	b.n	8004dc6 <UART_SetConfig+0x30a>
 8004da2:	bf00      	nop
 8004da4:	efff69f3 	.word	0xefff69f3
 8004da8:	40008000 	.word	0x40008000
 8004dac:	40013800 	.word	0x40013800
 8004db0:	40021000 	.word	0x40021000
 8004db4:	40004400 	.word	0x40004400
 8004db8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	76bb      	strb	r3, [r7, #26]
        break;
 8004dc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d073      	beq.n	8004eb4 <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	005a      	lsls	r2, r3, #1
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	085b      	lsrs	r3, r3, #1
 8004dd6:	441a      	add	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	2b0f      	cmp	r3, #15
 8004de6:	d916      	bls.n	8004e16 <UART_SetConfig+0x35a>
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dee:	d212      	bcs.n	8004e16 <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f023 030f 	bic.w	r3, r3, #15
 8004df8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	085b      	lsrs	r3, r3, #1
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	89fb      	ldrh	r3, [r7, #14]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	89fa      	ldrh	r2, [r7, #14]
 8004e12:	60da      	str	r2, [r3, #12]
 8004e14:	e04e      	b.n	8004eb4 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	76bb      	strb	r3, [r7, #26]
 8004e1a:	e04b      	b.n	8004eb4 <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e1c:	7efb      	ldrb	r3, [r7, #27]
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d827      	bhi.n	8004e72 <UART_SetConfig+0x3b6>
 8004e22:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <UART_SetConfig+0x36c>)
 8004e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e28:	08004e4d 	.word	0x08004e4d
 8004e2c:	08004e55 	.word	0x08004e55
 8004e30:	08004e5d 	.word	0x08004e5d
 8004e34:	08004e73 	.word	0x08004e73
 8004e38:	08004e63 	.word	0x08004e63
 8004e3c:	08004e73 	.word	0x08004e73
 8004e40:	08004e73 	.word	0x08004e73
 8004e44:	08004e73 	.word	0x08004e73
 8004e48:	08004e6b 	.word	0x08004e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e4c:	f7fd fe98 	bl	8002b80 <HAL_RCC_GetPCLK1Freq>
 8004e50:	6178      	str	r0, [r7, #20]
        break;
 8004e52:	e013      	b.n	8004e7c <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e54:	f7fd feaa 	bl	8002bac <HAL_RCC_GetPCLK2Freq>
 8004e58:	6178      	str	r0, [r7, #20]
        break;
 8004e5a:	e00f      	b.n	8004e7c <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <UART_SetConfig+0x410>)
 8004e5e:	617b      	str	r3, [r7, #20]
        break;
 8004e60:	e00c      	b.n	8004e7c <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e62:	f7fd fdf5 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 8004e66:	6178      	str	r0, [r7, #20]
        break;
 8004e68:	e008      	b.n	8004e7c <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e6e:	617b      	str	r3, [r7, #20]
        break;
 8004e70:	e004      	b.n	8004e7c <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	76bb      	strb	r3, [r7, #26]
        break;
 8004e7a:	bf00      	nop
    }

    if (pclk != 0U)
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d018      	beq.n	8004eb4 <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	085a      	lsrs	r2, r3, #1
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	441a      	add	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e94:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	2b0f      	cmp	r3, #15
 8004e9a:	d909      	bls.n	8004eb0 <UART_SetConfig+0x3f4>
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea2:	d205      	bcs.n	8004eb0 <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60da      	str	r2, [r3, #12]
 8004eae:	e001      	b.n	8004eb4 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ec0:	7ebb      	ldrb	r3, [r7, #26]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3720      	adds	r7, #32
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	00f42400 	.word	0x00f42400

08004ed0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	f003 0310 	and.w	r3, r3, #16
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d01a      	beq.n	8004fe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fce:	d10a      	bne.n	8004fe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]
  }
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af02      	add	r7, sp, #8
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005024:	f7fc fc4c 	bl	80018c0 <HAL_GetTick>
 8005028:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b08      	cmp	r3, #8
 8005036:	d10e      	bne.n	8005056 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f82d 	bl	80050a6 <UART_WaitOnFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e023      	b.n	800509e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b04      	cmp	r3, #4
 8005062:	d10e      	bne.n	8005082 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005064:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f817 	bl	80050a6 <UART_WaitOnFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e00d      	b.n	800509e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2220      	movs	r2, #32
 800508c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b09c      	sub	sp, #112	; 0x70
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	603b      	str	r3, [r7, #0]
 80050b2:	4613      	mov	r3, r2
 80050b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b6:	e0a5      	b.n	8005204 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050be:	f000 80a1 	beq.w	8005204 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c2:	f7fc fbfd 	bl	80018c0 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d302      	bcc.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80050d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d13e      	bne.n	8005156 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050ec:	667b      	str	r3, [r7, #100]	; 0x64
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050fe:	e841 2300 	strex	r3, r2, [r1]
 8005102:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e6      	bne.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3308      	adds	r3, #8
 8005110:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800511a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511c:	f023 0301 	bic.w	r3, r3, #1
 8005120:	663b      	str	r3, [r7, #96]	; 0x60
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3308      	adds	r3, #8
 8005128:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800512a:	64ba      	str	r2, [r7, #72]	; 0x48
 800512c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e5      	bne.n	800510a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2220      	movs	r2, #32
 8005142:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2220      	movs	r2, #32
 8005148:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e067      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d04f      	beq.n	8005204 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800516e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005172:	d147      	bne.n	8005204 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800517c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005186:	e853 3f00 	ldrex	r3, [r3]
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005192:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	461a      	mov	r2, r3
 800519a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519c:	637b      	str	r3, [r7, #52]	; 0x34
 800519e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051a4:	e841 2300 	strex	r3, r2, [r1]
 80051a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1e6      	bne.n	800517e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3308      	adds	r3, #8
 80051b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	e853 3f00 	ldrex	r3, [r3]
 80051be:	613b      	str	r3, [r7, #16]
   return(result);
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f023 0301 	bic.w	r3, r3, #1
 80051c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3308      	adds	r3, #8
 80051ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051d0:	623a      	str	r2, [r7, #32]
 80051d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d4:	69f9      	ldr	r1, [r7, #28]
 80051d6:	6a3a      	ldr	r2, [r7, #32]
 80051d8:	e841 2300 	strex	r3, r2, [r1]
 80051dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1e5      	bne.n	80051b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2220      	movs	r2, #32
 80051ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e010      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69da      	ldr	r2, [r3, #28]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	4013      	ands	r3, r2
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	429a      	cmp	r2, r3
 8005212:	bf0c      	ite	eq
 8005214:	2301      	moveq	r3, #1
 8005216:	2300      	movne	r3, #0
 8005218:	b2db      	uxtb	r3, r3
 800521a:	461a      	mov	r2, r3
 800521c:	79fb      	ldrb	r3, [r7, #7]
 800521e:	429a      	cmp	r2, r3
 8005220:	f43f af4a 	beq.w	80050b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3770      	adds	r7, #112	; 0x70
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005230:	b480      	push	{r7}
 8005232:	b097      	sub	sp, #92	; 0x5c
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	4613      	mov	r3, r2
 800523c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	88fa      	ldrh	r2, [r7, #6]
 8005248:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	88fa      	ldrh	r2, [r7, #6]
 8005250:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005262:	d10e      	bne.n	8005282 <UART_Start_Receive_IT+0x52>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d105      	bne.n	8005278 <UART_Start_Receive_IT+0x48>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005272:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005276:	e02d      	b.n	80052d4 <UART_Start_Receive_IT+0xa4>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	22ff      	movs	r2, #255	; 0xff
 800527c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005280:	e028      	b.n	80052d4 <UART_Start_Receive_IT+0xa4>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10d      	bne.n	80052a6 <UART_Start_Receive_IT+0x76>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d104      	bne.n	800529c <UART_Start_Receive_IT+0x6c>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	22ff      	movs	r2, #255	; 0xff
 8005296:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800529a:	e01b      	b.n	80052d4 <UART_Start_Receive_IT+0xa4>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	227f      	movs	r2, #127	; 0x7f
 80052a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052a4:	e016      	b.n	80052d4 <UART_Start_Receive_IT+0xa4>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052ae:	d10d      	bne.n	80052cc <UART_Start_Receive_IT+0x9c>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d104      	bne.n	80052c2 <UART_Start_Receive_IT+0x92>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	227f      	movs	r2, #127	; 0x7f
 80052bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052c0:	e008      	b.n	80052d4 <UART_Start_Receive_IT+0xa4>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	223f      	movs	r2, #63	; 0x3f
 80052c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052ca:	e003      	b.n	80052d4 <UART_Start_Receive_IT+0xa4>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2222      	movs	r2, #34	; 0x22
 80052e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3308      	adds	r3, #8
 80052e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f4:	f043 0301 	orr.w	r3, r3, #1
 80052f8:	657b      	str	r3, [r7, #84]	; 0x54
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3308      	adds	r3, #8
 8005300:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005302:	64ba      	str	r2, [r7, #72]	; 0x48
 8005304:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005306:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800530a:	e841 2300 	strex	r3, r2, [r1]
 800530e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1e5      	bne.n	80052e2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531e:	d107      	bne.n	8005330 <UART_Start_Receive_IT+0x100>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d103      	bne.n	8005330 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4a24      	ldr	r2, [pc, #144]	; (80053bc <UART_Start_Receive_IT+0x18c>)
 800532c:	665a      	str	r2, [r3, #100]	; 0x64
 800532e:	e002      	b.n	8005336 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4a23      	ldr	r2, [pc, #140]	; (80053c0 <UART_Start_Receive_IT+0x190>)
 8005334:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d019      	beq.n	800537a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	e853 3f00 	ldrex	r3, [r3]
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800535a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005364:	637b      	str	r3, [r7, #52]	; 0x34
 8005366:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005368:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800536a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800536c:	e841 2300 	strex	r3, r2, [r1]
 8005370:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e6      	bne.n	8005346 <UART_Start_Receive_IT+0x116>
 8005378:	e018      	b.n	80053ac <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	e853 3f00 	ldrex	r3, [r3]
 8005386:	613b      	str	r3, [r7, #16]
   return(result);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f043 0320 	orr.w	r3, r3, #32
 800538e:	653b      	str	r3, [r7, #80]	; 0x50
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005398:	623b      	str	r3, [r7, #32]
 800539a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539c:	69f9      	ldr	r1, [r7, #28]
 800539e:	6a3a      	ldr	r2, [r7, #32]
 80053a0:	e841 2300 	strex	r3, r2, [r1]
 80053a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1e6      	bne.n	800537a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	375c      	adds	r7, #92	; 0x5c
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	0800566b 	.word	0x0800566b
 80053c0:	0800550b 	.word	0x0800550b

080053c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b095      	sub	sp, #84	; 0x54
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ea:	643b      	str	r3, [r7, #64]	; 0x40
 80053ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e6      	bne.n	80053cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3308      	adds	r3, #8
 8005404:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	61fb      	str	r3, [r7, #28]
   return(result);
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	f023 0301 	bic.w	r3, r3, #1
 8005414:	64bb      	str	r3, [r7, #72]	; 0x48
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3308      	adds	r3, #8
 800541c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800541e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005420:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1e5      	bne.n	80053fe <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005436:	2b01      	cmp	r3, #1
 8005438:	d118      	bne.n	800546c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	e853 3f00 	ldrex	r3, [r3]
 8005446:	60bb      	str	r3, [r7, #8]
   return(result);
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f023 0310 	bic.w	r3, r3, #16
 800544e:	647b      	str	r3, [r7, #68]	; 0x44
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	461a      	mov	r2, r3
 8005456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005458:	61bb      	str	r3, [r7, #24]
 800545a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545c:	6979      	ldr	r1, [r7, #20]
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	e841 2300 	strex	r3, r2, [r1]
 8005464:	613b      	str	r3, [r7, #16]
   return(result);
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e6      	bne.n	800543a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800547e:	bf00      	nop
 8005480:	3754      	adds	r7, #84	; 0x54
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005496:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7ff faf1 	bl	8004a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054ae:	bf00      	nop
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b088      	sub	sp, #32
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d2:	61fb      	str	r3, [r7, #28]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6979      	ldr	r1, [r7, #20]
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	613b      	str	r3, [r7, #16]
   return(result);
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e6      	bne.n	80054be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff fabd 	bl	8004a7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005502:	bf00      	nop
 8005504:	3720      	adds	r7, #32
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b096      	sub	sp, #88	; 0x58
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005518:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005520:	2b22      	cmp	r3, #34	; 0x22
 8005522:	f040 8094 	bne.w	800564e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800552c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005530:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005534:	b2d9      	uxtb	r1, r3
 8005536:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800553a:	b2da      	uxtb	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005540:	400a      	ands	r2, r1
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005568:	b29b      	uxth	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d179      	bne.n	8005662 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800557c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005582:	653b      	str	r3, [r7, #80]	; 0x50
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800558c:	647b      	str	r3, [r7, #68]	; 0x44
 800558e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800559a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e6      	bne.n	800556e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3308      	adds	r3, #8
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	e853 3f00 	ldrex	r3, [r3]
 80055ae:	623b      	str	r3, [r7, #32]
   return(result);
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	f023 0301 	bic.w	r3, r3, #1
 80055b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3308      	adds	r3, #8
 80055be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055c0:	633a      	str	r2, [r7, #48]	; 0x30
 80055c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c8:	e841 2300 	strex	r3, r2, [r1]
 80055cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e5      	bne.n	80055a0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2220      	movs	r2, #32
 80055d8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d12e      	bne.n	8005646 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	e853 3f00 	ldrex	r3, [r3]
 80055fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0310 	bic.w	r3, r3, #16
 8005602:	64bb      	str	r3, [r7, #72]	; 0x48
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800560c:	61fb      	str	r3, [r7, #28]
 800560e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	69b9      	ldr	r1, [r7, #24]
 8005612:	69fa      	ldr	r2, [r7, #28]
 8005614:	e841 2300 	strex	r3, r2, [r1]
 8005618:	617b      	str	r3, [r7, #20]
   return(result);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e6      	bne.n	80055ee <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	2b10      	cmp	r3, #16
 800562c:	d103      	bne.n	8005636 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2210      	movs	r2, #16
 8005634:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff fa30 	bl	8004aa4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005644:	e00d      	b.n	8005662 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7fb fe56 	bl	80012f8 <HAL_UART_RxCpltCallback>
}
 800564c:	e009      	b.n	8005662 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	8b1b      	ldrh	r3, [r3, #24]
 8005654:	b29a      	uxth	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0208 	orr.w	r2, r2, #8
 800565e:	b292      	uxth	r2, r2
 8005660:	831a      	strh	r2, [r3, #24]
}
 8005662:	bf00      	nop
 8005664:	3758      	adds	r7, #88	; 0x58
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b096      	sub	sp, #88	; 0x58
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005678:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005680:	2b22      	cmp	r3, #34	; 0x22
 8005682:	f040 8094 	bne.w	80057ae <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800568c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005694:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005696:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800569a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800569e:	4013      	ands	r3, r2
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056aa:	1c9a      	adds	r2, r3, #2
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d179      	bne.n	80057c2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d6:	e853 3f00 	ldrex	r3, [r3]
 80056da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	461a      	mov	r2, r3
 80056ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ec:	643b      	str	r3, [r7, #64]	; 0x40
 80056ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e6      	bne.n	80056ce <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3308      	adds	r3, #8
 8005706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	e853 3f00 	ldrex	r3, [r3]
 800570e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	f023 0301 	bic.w	r3, r3, #1
 8005716:	64bb      	str	r3, [r7, #72]	; 0x48
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3308      	adds	r3, #8
 800571e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005720:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005728:	e841 2300 	strex	r3, r2, [r1]
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e5      	bne.n	8005700 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2220      	movs	r2, #32
 8005738:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005744:	2b01      	cmp	r3, #1
 8005746:	d12e      	bne.n	80057a6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	60bb      	str	r3, [r7, #8]
   return(result);
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f023 0310 	bic.w	r3, r3, #16
 8005762:	647b      	str	r3, [r7, #68]	; 0x44
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	461a      	mov	r2, r3
 800576a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800576c:	61bb      	str	r3, [r7, #24]
 800576e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6979      	ldr	r1, [r7, #20]
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	613b      	str	r3, [r7, #16]
   return(result);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e6      	bne.n	800574e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	f003 0310 	and.w	r3, r3, #16
 800578a:	2b10      	cmp	r3, #16
 800578c:	d103      	bne.n	8005796 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2210      	movs	r2, #16
 8005794:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800579c:	4619      	mov	r1, r3
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff f980 	bl	8004aa4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057a4:	e00d      	b.n	80057c2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fb fda6 	bl	80012f8 <HAL_UART_RxCpltCallback>
}
 80057ac:	e009      	b.n	80057c2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	8b1b      	ldrh	r3, [r3, #24]
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0208 	orr.w	r2, r2, #8
 80057be:	b292      	uxth	r2, r2
 80057c0:	831a      	strh	r2, [r3, #24]
}
 80057c2:	bf00      	nop
 80057c4:	3758      	adds	r7, #88	; 0x58
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
	...

080057e0 <__errno>:
 80057e0:	4b01      	ldr	r3, [pc, #4]	; (80057e8 <__errno+0x8>)
 80057e2:	6818      	ldr	r0, [r3, #0]
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	20000050 	.word	0x20000050

080057ec <__libc_init_array>:
 80057ec:	b570      	push	{r4, r5, r6, lr}
 80057ee:	4d0d      	ldr	r5, [pc, #52]	; (8005824 <__libc_init_array+0x38>)
 80057f0:	4c0d      	ldr	r4, [pc, #52]	; (8005828 <__libc_init_array+0x3c>)
 80057f2:	1b64      	subs	r4, r4, r5
 80057f4:	10a4      	asrs	r4, r4, #2
 80057f6:	2600      	movs	r6, #0
 80057f8:	42a6      	cmp	r6, r4
 80057fa:	d109      	bne.n	8005810 <__libc_init_array+0x24>
 80057fc:	4d0b      	ldr	r5, [pc, #44]	; (800582c <__libc_init_array+0x40>)
 80057fe:	4c0c      	ldr	r4, [pc, #48]	; (8005830 <__libc_init_array+0x44>)
 8005800:	f000 fc4e 	bl	80060a0 <_init>
 8005804:	1b64      	subs	r4, r4, r5
 8005806:	10a4      	asrs	r4, r4, #2
 8005808:	2600      	movs	r6, #0
 800580a:	42a6      	cmp	r6, r4
 800580c:	d105      	bne.n	800581a <__libc_init_array+0x2e>
 800580e:	bd70      	pop	{r4, r5, r6, pc}
 8005810:	f855 3b04 	ldr.w	r3, [r5], #4
 8005814:	4798      	blx	r3
 8005816:	3601      	adds	r6, #1
 8005818:	e7ee      	b.n	80057f8 <__libc_init_array+0xc>
 800581a:	f855 3b04 	ldr.w	r3, [r5], #4
 800581e:	4798      	blx	r3
 8005820:	3601      	adds	r6, #1
 8005822:	e7f2      	b.n	800580a <__libc_init_array+0x1e>
 8005824:	08006144 	.word	0x08006144
 8005828:	08006144 	.word	0x08006144
 800582c:	08006144 	.word	0x08006144
 8005830:	08006148 	.word	0x08006148

08005834 <memset>:
 8005834:	4402      	add	r2, r0
 8005836:	4603      	mov	r3, r0
 8005838:	4293      	cmp	r3, r2
 800583a:	d100      	bne.n	800583e <memset+0xa>
 800583c:	4770      	bx	lr
 800583e:	f803 1b01 	strb.w	r1, [r3], #1
 8005842:	e7f9      	b.n	8005838 <memset+0x4>

08005844 <siprintf>:
 8005844:	b40e      	push	{r1, r2, r3}
 8005846:	b500      	push	{lr}
 8005848:	b09c      	sub	sp, #112	; 0x70
 800584a:	ab1d      	add	r3, sp, #116	; 0x74
 800584c:	9002      	str	r0, [sp, #8]
 800584e:	9006      	str	r0, [sp, #24]
 8005850:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005854:	4809      	ldr	r0, [pc, #36]	; (800587c <siprintf+0x38>)
 8005856:	9107      	str	r1, [sp, #28]
 8005858:	9104      	str	r1, [sp, #16]
 800585a:	4909      	ldr	r1, [pc, #36]	; (8005880 <siprintf+0x3c>)
 800585c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005860:	9105      	str	r1, [sp, #20]
 8005862:	6800      	ldr	r0, [r0, #0]
 8005864:	9301      	str	r3, [sp, #4]
 8005866:	a902      	add	r1, sp, #8
 8005868:	f000 f868 	bl	800593c <_svfiprintf_r>
 800586c:	9b02      	ldr	r3, [sp, #8]
 800586e:	2200      	movs	r2, #0
 8005870:	701a      	strb	r2, [r3, #0]
 8005872:	b01c      	add	sp, #112	; 0x70
 8005874:	f85d eb04 	ldr.w	lr, [sp], #4
 8005878:	b003      	add	sp, #12
 800587a:	4770      	bx	lr
 800587c:	20000050 	.word	0x20000050
 8005880:	ffff0208 	.word	0xffff0208

08005884 <__ssputs_r>:
 8005884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005888:	688e      	ldr	r6, [r1, #8]
 800588a:	429e      	cmp	r6, r3
 800588c:	4682      	mov	sl, r0
 800588e:	460c      	mov	r4, r1
 8005890:	4690      	mov	r8, r2
 8005892:	461f      	mov	r7, r3
 8005894:	d838      	bhi.n	8005908 <__ssputs_r+0x84>
 8005896:	898a      	ldrh	r2, [r1, #12]
 8005898:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800589c:	d032      	beq.n	8005904 <__ssputs_r+0x80>
 800589e:	6825      	ldr	r5, [r4, #0]
 80058a0:	6909      	ldr	r1, [r1, #16]
 80058a2:	eba5 0901 	sub.w	r9, r5, r1
 80058a6:	6965      	ldr	r5, [r4, #20]
 80058a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058b0:	3301      	adds	r3, #1
 80058b2:	444b      	add	r3, r9
 80058b4:	106d      	asrs	r5, r5, #1
 80058b6:	429d      	cmp	r5, r3
 80058b8:	bf38      	it	cc
 80058ba:	461d      	movcc	r5, r3
 80058bc:	0553      	lsls	r3, r2, #21
 80058be:	d531      	bpl.n	8005924 <__ssputs_r+0xa0>
 80058c0:	4629      	mov	r1, r5
 80058c2:	f000 fb47 	bl	8005f54 <_malloc_r>
 80058c6:	4606      	mov	r6, r0
 80058c8:	b950      	cbnz	r0, 80058e0 <__ssputs_r+0x5c>
 80058ca:	230c      	movs	r3, #12
 80058cc:	f8ca 3000 	str.w	r3, [sl]
 80058d0:	89a3      	ldrh	r3, [r4, #12]
 80058d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058d6:	81a3      	strh	r3, [r4, #12]
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295
 80058dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e0:	6921      	ldr	r1, [r4, #16]
 80058e2:	464a      	mov	r2, r9
 80058e4:	f000 fabe 	bl	8005e64 <memcpy>
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f2:	81a3      	strh	r3, [r4, #12]
 80058f4:	6126      	str	r6, [r4, #16]
 80058f6:	6165      	str	r5, [r4, #20]
 80058f8:	444e      	add	r6, r9
 80058fa:	eba5 0509 	sub.w	r5, r5, r9
 80058fe:	6026      	str	r6, [r4, #0]
 8005900:	60a5      	str	r5, [r4, #8]
 8005902:	463e      	mov	r6, r7
 8005904:	42be      	cmp	r6, r7
 8005906:	d900      	bls.n	800590a <__ssputs_r+0x86>
 8005908:	463e      	mov	r6, r7
 800590a:	4632      	mov	r2, r6
 800590c:	6820      	ldr	r0, [r4, #0]
 800590e:	4641      	mov	r1, r8
 8005910:	f000 fab6 	bl	8005e80 <memmove>
 8005914:	68a3      	ldr	r3, [r4, #8]
 8005916:	6822      	ldr	r2, [r4, #0]
 8005918:	1b9b      	subs	r3, r3, r6
 800591a:	4432      	add	r2, r6
 800591c:	60a3      	str	r3, [r4, #8]
 800591e:	6022      	str	r2, [r4, #0]
 8005920:	2000      	movs	r0, #0
 8005922:	e7db      	b.n	80058dc <__ssputs_r+0x58>
 8005924:	462a      	mov	r2, r5
 8005926:	f000 fb6f 	bl	8006008 <_realloc_r>
 800592a:	4606      	mov	r6, r0
 800592c:	2800      	cmp	r0, #0
 800592e:	d1e1      	bne.n	80058f4 <__ssputs_r+0x70>
 8005930:	6921      	ldr	r1, [r4, #16]
 8005932:	4650      	mov	r0, sl
 8005934:	f000 fabe 	bl	8005eb4 <_free_r>
 8005938:	e7c7      	b.n	80058ca <__ssputs_r+0x46>
	...

0800593c <_svfiprintf_r>:
 800593c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005940:	4698      	mov	r8, r3
 8005942:	898b      	ldrh	r3, [r1, #12]
 8005944:	061b      	lsls	r3, r3, #24
 8005946:	b09d      	sub	sp, #116	; 0x74
 8005948:	4607      	mov	r7, r0
 800594a:	460d      	mov	r5, r1
 800594c:	4614      	mov	r4, r2
 800594e:	d50e      	bpl.n	800596e <_svfiprintf_r+0x32>
 8005950:	690b      	ldr	r3, [r1, #16]
 8005952:	b963      	cbnz	r3, 800596e <_svfiprintf_r+0x32>
 8005954:	2140      	movs	r1, #64	; 0x40
 8005956:	f000 fafd 	bl	8005f54 <_malloc_r>
 800595a:	6028      	str	r0, [r5, #0]
 800595c:	6128      	str	r0, [r5, #16]
 800595e:	b920      	cbnz	r0, 800596a <_svfiprintf_r+0x2e>
 8005960:	230c      	movs	r3, #12
 8005962:	603b      	str	r3, [r7, #0]
 8005964:	f04f 30ff 	mov.w	r0, #4294967295
 8005968:	e0d1      	b.n	8005b0e <_svfiprintf_r+0x1d2>
 800596a:	2340      	movs	r3, #64	; 0x40
 800596c:	616b      	str	r3, [r5, #20]
 800596e:	2300      	movs	r3, #0
 8005970:	9309      	str	r3, [sp, #36]	; 0x24
 8005972:	2320      	movs	r3, #32
 8005974:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005978:	f8cd 800c 	str.w	r8, [sp, #12]
 800597c:	2330      	movs	r3, #48	; 0x30
 800597e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b28 <_svfiprintf_r+0x1ec>
 8005982:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005986:	f04f 0901 	mov.w	r9, #1
 800598a:	4623      	mov	r3, r4
 800598c:	469a      	mov	sl, r3
 800598e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005992:	b10a      	cbz	r2, 8005998 <_svfiprintf_r+0x5c>
 8005994:	2a25      	cmp	r2, #37	; 0x25
 8005996:	d1f9      	bne.n	800598c <_svfiprintf_r+0x50>
 8005998:	ebba 0b04 	subs.w	fp, sl, r4
 800599c:	d00b      	beq.n	80059b6 <_svfiprintf_r+0x7a>
 800599e:	465b      	mov	r3, fp
 80059a0:	4622      	mov	r2, r4
 80059a2:	4629      	mov	r1, r5
 80059a4:	4638      	mov	r0, r7
 80059a6:	f7ff ff6d 	bl	8005884 <__ssputs_r>
 80059aa:	3001      	adds	r0, #1
 80059ac:	f000 80aa 	beq.w	8005b04 <_svfiprintf_r+0x1c8>
 80059b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059b2:	445a      	add	r2, fp
 80059b4:	9209      	str	r2, [sp, #36]	; 0x24
 80059b6:	f89a 3000 	ldrb.w	r3, [sl]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 80a2 	beq.w	8005b04 <_svfiprintf_r+0x1c8>
 80059c0:	2300      	movs	r3, #0
 80059c2:	f04f 32ff 	mov.w	r2, #4294967295
 80059c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059ca:	f10a 0a01 	add.w	sl, sl, #1
 80059ce:	9304      	str	r3, [sp, #16]
 80059d0:	9307      	str	r3, [sp, #28]
 80059d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059d6:	931a      	str	r3, [sp, #104]	; 0x68
 80059d8:	4654      	mov	r4, sl
 80059da:	2205      	movs	r2, #5
 80059dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059e0:	4851      	ldr	r0, [pc, #324]	; (8005b28 <_svfiprintf_r+0x1ec>)
 80059e2:	f7fa fbf5 	bl	80001d0 <memchr>
 80059e6:	9a04      	ldr	r2, [sp, #16]
 80059e8:	b9d8      	cbnz	r0, 8005a22 <_svfiprintf_r+0xe6>
 80059ea:	06d0      	lsls	r0, r2, #27
 80059ec:	bf44      	itt	mi
 80059ee:	2320      	movmi	r3, #32
 80059f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059f4:	0711      	lsls	r1, r2, #28
 80059f6:	bf44      	itt	mi
 80059f8:	232b      	movmi	r3, #43	; 0x2b
 80059fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005a02:	2b2a      	cmp	r3, #42	; 0x2a
 8005a04:	d015      	beq.n	8005a32 <_svfiprintf_r+0xf6>
 8005a06:	9a07      	ldr	r2, [sp, #28]
 8005a08:	4654      	mov	r4, sl
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	f04f 0c0a 	mov.w	ip, #10
 8005a10:	4621      	mov	r1, r4
 8005a12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a16:	3b30      	subs	r3, #48	; 0x30
 8005a18:	2b09      	cmp	r3, #9
 8005a1a:	d94e      	bls.n	8005aba <_svfiprintf_r+0x17e>
 8005a1c:	b1b0      	cbz	r0, 8005a4c <_svfiprintf_r+0x110>
 8005a1e:	9207      	str	r2, [sp, #28]
 8005a20:	e014      	b.n	8005a4c <_svfiprintf_r+0x110>
 8005a22:	eba0 0308 	sub.w	r3, r0, r8
 8005a26:	fa09 f303 	lsl.w	r3, r9, r3
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	9304      	str	r3, [sp, #16]
 8005a2e:	46a2      	mov	sl, r4
 8005a30:	e7d2      	b.n	80059d8 <_svfiprintf_r+0x9c>
 8005a32:	9b03      	ldr	r3, [sp, #12]
 8005a34:	1d19      	adds	r1, r3, #4
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	9103      	str	r1, [sp, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	bfbb      	ittet	lt
 8005a3e:	425b      	neglt	r3, r3
 8005a40:	f042 0202 	orrlt.w	r2, r2, #2
 8005a44:	9307      	strge	r3, [sp, #28]
 8005a46:	9307      	strlt	r3, [sp, #28]
 8005a48:	bfb8      	it	lt
 8005a4a:	9204      	strlt	r2, [sp, #16]
 8005a4c:	7823      	ldrb	r3, [r4, #0]
 8005a4e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a50:	d10c      	bne.n	8005a6c <_svfiprintf_r+0x130>
 8005a52:	7863      	ldrb	r3, [r4, #1]
 8005a54:	2b2a      	cmp	r3, #42	; 0x2a
 8005a56:	d135      	bne.n	8005ac4 <_svfiprintf_r+0x188>
 8005a58:	9b03      	ldr	r3, [sp, #12]
 8005a5a:	1d1a      	adds	r2, r3, #4
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	9203      	str	r2, [sp, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	bfb8      	it	lt
 8005a64:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a68:	3402      	adds	r4, #2
 8005a6a:	9305      	str	r3, [sp, #20]
 8005a6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b38 <_svfiprintf_r+0x1fc>
 8005a70:	7821      	ldrb	r1, [r4, #0]
 8005a72:	2203      	movs	r2, #3
 8005a74:	4650      	mov	r0, sl
 8005a76:	f7fa fbab 	bl	80001d0 <memchr>
 8005a7a:	b140      	cbz	r0, 8005a8e <_svfiprintf_r+0x152>
 8005a7c:	2340      	movs	r3, #64	; 0x40
 8005a7e:	eba0 000a 	sub.w	r0, r0, sl
 8005a82:	fa03 f000 	lsl.w	r0, r3, r0
 8005a86:	9b04      	ldr	r3, [sp, #16]
 8005a88:	4303      	orrs	r3, r0
 8005a8a:	3401      	adds	r4, #1
 8005a8c:	9304      	str	r3, [sp, #16]
 8005a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a92:	4826      	ldr	r0, [pc, #152]	; (8005b2c <_svfiprintf_r+0x1f0>)
 8005a94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a98:	2206      	movs	r2, #6
 8005a9a:	f7fa fb99 	bl	80001d0 <memchr>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d038      	beq.n	8005b14 <_svfiprintf_r+0x1d8>
 8005aa2:	4b23      	ldr	r3, [pc, #140]	; (8005b30 <_svfiprintf_r+0x1f4>)
 8005aa4:	bb1b      	cbnz	r3, 8005aee <_svfiprintf_r+0x1b2>
 8005aa6:	9b03      	ldr	r3, [sp, #12]
 8005aa8:	3307      	adds	r3, #7
 8005aaa:	f023 0307 	bic.w	r3, r3, #7
 8005aae:	3308      	adds	r3, #8
 8005ab0:	9303      	str	r3, [sp, #12]
 8005ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab4:	4433      	add	r3, r6
 8005ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab8:	e767      	b.n	800598a <_svfiprintf_r+0x4e>
 8005aba:	fb0c 3202 	mla	r2, ip, r2, r3
 8005abe:	460c      	mov	r4, r1
 8005ac0:	2001      	movs	r0, #1
 8005ac2:	e7a5      	b.n	8005a10 <_svfiprintf_r+0xd4>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	3401      	adds	r4, #1
 8005ac8:	9305      	str	r3, [sp, #20]
 8005aca:	4619      	mov	r1, r3
 8005acc:	f04f 0c0a 	mov.w	ip, #10
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ad6:	3a30      	subs	r2, #48	; 0x30
 8005ad8:	2a09      	cmp	r2, #9
 8005ada:	d903      	bls.n	8005ae4 <_svfiprintf_r+0x1a8>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0c5      	beq.n	8005a6c <_svfiprintf_r+0x130>
 8005ae0:	9105      	str	r1, [sp, #20]
 8005ae2:	e7c3      	b.n	8005a6c <_svfiprintf_r+0x130>
 8005ae4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ae8:	4604      	mov	r4, r0
 8005aea:	2301      	movs	r3, #1
 8005aec:	e7f0      	b.n	8005ad0 <_svfiprintf_r+0x194>
 8005aee:	ab03      	add	r3, sp, #12
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	462a      	mov	r2, r5
 8005af4:	4b0f      	ldr	r3, [pc, #60]	; (8005b34 <_svfiprintf_r+0x1f8>)
 8005af6:	a904      	add	r1, sp, #16
 8005af8:	4638      	mov	r0, r7
 8005afa:	f3af 8000 	nop.w
 8005afe:	1c42      	adds	r2, r0, #1
 8005b00:	4606      	mov	r6, r0
 8005b02:	d1d6      	bne.n	8005ab2 <_svfiprintf_r+0x176>
 8005b04:	89ab      	ldrh	r3, [r5, #12]
 8005b06:	065b      	lsls	r3, r3, #25
 8005b08:	f53f af2c 	bmi.w	8005964 <_svfiprintf_r+0x28>
 8005b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b0e:	b01d      	add	sp, #116	; 0x74
 8005b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b14:	ab03      	add	r3, sp, #12
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	462a      	mov	r2, r5
 8005b1a:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <_svfiprintf_r+0x1f8>)
 8005b1c:	a904      	add	r1, sp, #16
 8005b1e:	4638      	mov	r0, r7
 8005b20:	f000 f87a 	bl	8005c18 <_printf_i>
 8005b24:	e7eb      	b.n	8005afe <_svfiprintf_r+0x1c2>
 8005b26:	bf00      	nop
 8005b28:	08006108 	.word	0x08006108
 8005b2c:	08006112 	.word	0x08006112
 8005b30:	00000000 	.word	0x00000000
 8005b34:	08005885 	.word	0x08005885
 8005b38:	0800610e 	.word	0x0800610e

08005b3c <_printf_common>:
 8005b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b40:	4616      	mov	r6, r2
 8005b42:	4699      	mov	r9, r3
 8005b44:	688a      	ldr	r2, [r1, #8]
 8005b46:	690b      	ldr	r3, [r1, #16]
 8005b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	bfb8      	it	lt
 8005b50:	4613      	movlt	r3, r2
 8005b52:	6033      	str	r3, [r6, #0]
 8005b54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b58:	4607      	mov	r7, r0
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	b10a      	cbz	r2, 8005b62 <_printf_common+0x26>
 8005b5e:	3301      	adds	r3, #1
 8005b60:	6033      	str	r3, [r6, #0]
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	0699      	lsls	r1, r3, #26
 8005b66:	bf42      	ittt	mi
 8005b68:	6833      	ldrmi	r3, [r6, #0]
 8005b6a:	3302      	addmi	r3, #2
 8005b6c:	6033      	strmi	r3, [r6, #0]
 8005b6e:	6825      	ldr	r5, [r4, #0]
 8005b70:	f015 0506 	ands.w	r5, r5, #6
 8005b74:	d106      	bne.n	8005b84 <_printf_common+0x48>
 8005b76:	f104 0a19 	add.w	sl, r4, #25
 8005b7a:	68e3      	ldr	r3, [r4, #12]
 8005b7c:	6832      	ldr	r2, [r6, #0]
 8005b7e:	1a9b      	subs	r3, r3, r2
 8005b80:	42ab      	cmp	r3, r5
 8005b82:	dc26      	bgt.n	8005bd2 <_printf_common+0x96>
 8005b84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b88:	1e13      	subs	r3, r2, #0
 8005b8a:	6822      	ldr	r2, [r4, #0]
 8005b8c:	bf18      	it	ne
 8005b8e:	2301      	movne	r3, #1
 8005b90:	0692      	lsls	r2, r2, #26
 8005b92:	d42b      	bmi.n	8005bec <_printf_common+0xb0>
 8005b94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b98:	4649      	mov	r1, r9
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	47c0      	blx	r8
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	d01e      	beq.n	8005be0 <_printf_common+0xa4>
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	68e5      	ldr	r5, [r4, #12]
 8005ba6:	6832      	ldr	r2, [r6, #0]
 8005ba8:	f003 0306 	and.w	r3, r3, #6
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	bf08      	it	eq
 8005bb0:	1aad      	subeq	r5, r5, r2
 8005bb2:	68a3      	ldr	r3, [r4, #8]
 8005bb4:	6922      	ldr	r2, [r4, #16]
 8005bb6:	bf0c      	ite	eq
 8005bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bbc:	2500      	movne	r5, #0
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	bfc4      	itt	gt
 8005bc2:	1a9b      	subgt	r3, r3, r2
 8005bc4:	18ed      	addgt	r5, r5, r3
 8005bc6:	2600      	movs	r6, #0
 8005bc8:	341a      	adds	r4, #26
 8005bca:	42b5      	cmp	r5, r6
 8005bcc:	d11a      	bne.n	8005c04 <_printf_common+0xc8>
 8005bce:	2000      	movs	r0, #0
 8005bd0:	e008      	b.n	8005be4 <_printf_common+0xa8>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	4652      	mov	r2, sl
 8005bd6:	4649      	mov	r1, r9
 8005bd8:	4638      	mov	r0, r7
 8005bda:	47c0      	blx	r8
 8005bdc:	3001      	adds	r0, #1
 8005bde:	d103      	bne.n	8005be8 <_printf_common+0xac>
 8005be0:	f04f 30ff 	mov.w	r0, #4294967295
 8005be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be8:	3501      	adds	r5, #1
 8005bea:	e7c6      	b.n	8005b7a <_printf_common+0x3e>
 8005bec:	18e1      	adds	r1, r4, r3
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	2030      	movs	r0, #48	; 0x30
 8005bf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bf6:	4422      	add	r2, r4
 8005bf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c00:	3302      	adds	r3, #2
 8005c02:	e7c7      	b.n	8005b94 <_printf_common+0x58>
 8005c04:	2301      	movs	r3, #1
 8005c06:	4622      	mov	r2, r4
 8005c08:	4649      	mov	r1, r9
 8005c0a:	4638      	mov	r0, r7
 8005c0c:	47c0      	blx	r8
 8005c0e:	3001      	adds	r0, #1
 8005c10:	d0e6      	beq.n	8005be0 <_printf_common+0xa4>
 8005c12:	3601      	adds	r6, #1
 8005c14:	e7d9      	b.n	8005bca <_printf_common+0x8e>
	...

08005c18 <_printf_i>:
 8005c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	4691      	mov	r9, r2
 8005c20:	7e27      	ldrb	r7, [r4, #24]
 8005c22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c24:	2f78      	cmp	r7, #120	; 0x78
 8005c26:	4680      	mov	r8, r0
 8005c28:	469a      	mov	sl, r3
 8005c2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c2e:	d807      	bhi.n	8005c40 <_printf_i+0x28>
 8005c30:	2f62      	cmp	r7, #98	; 0x62
 8005c32:	d80a      	bhi.n	8005c4a <_printf_i+0x32>
 8005c34:	2f00      	cmp	r7, #0
 8005c36:	f000 80d8 	beq.w	8005dea <_printf_i+0x1d2>
 8005c3a:	2f58      	cmp	r7, #88	; 0x58
 8005c3c:	f000 80a3 	beq.w	8005d86 <_printf_i+0x16e>
 8005c40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c48:	e03a      	b.n	8005cc0 <_printf_i+0xa8>
 8005c4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c4e:	2b15      	cmp	r3, #21
 8005c50:	d8f6      	bhi.n	8005c40 <_printf_i+0x28>
 8005c52:	a001      	add	r0, pc, #4	; (adr r0, 8005c58 <_printf_i+0x40>)
 8005c54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c58:	08005cb1 	.word	0x08005cb1
 8005c5c:	08005cc5 	.word	0x08005cc5
 8005c60:	08005c41 	.word	0x08005c41
 8005c64:	08005c41 	.word	0x08005c41
 8005c68:	08005c41 	.word	0x08005c41
 8005c6c:	08005c41 	.word	0x08005c41
 8005c70:	08005cc5 	.word	0x08005cc5
 8005c74:	08005c41 	.word	0x08005c41
 8005c78:	08005c41 	.word	0x08005c41
 8005c7c:	08005c41 	.word	0x08005c41
 8005c80:	08005c41 	.word	0x08005c41
 8005c84:	08005dd1 	.word	0x08005dd1
 8005c88:	08005cf5 	.word	0x08005cf5
 8005c8c:	08005db3 	.word	0x08005db3
 8005c90:	08005c41 	.word	0x08005c41
 8005c94:	08005c41 	.word	0x08005c41
 8005c98:	08005df3 	.word	0x08005df3
 8005c9c:	08005c41 	.word	0x08005c41
 8005ca0:	08005cf5 	.word	0x08005cf5
 8005ca4:	08005c41 	.word	0x08005c41
 8005ca8:	08005c41 	.word	0x08005c41
 8005cac:	08005dbb 	.word	0x08005dbb
 8005cb0:	680b      	ldr	r3, [r1, #0]
 8005cb2:	1d1a      	adds	r2, r3, #4
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	600a      	str	r2, [r1, #0]
 8005cb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005cbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e0a3      	b.n	8005e0c <_printf_i+0x1f4>
 8005cc4:	6825      	ldr	r5, [r4, #0]
 8005cc6:	6808      	ldr	r0, [r1, #0]
 8005cc8:	062e      	lsls	r6, r5, #24
 8005cca:	f100 0304 	add.w	r3, r0, #4
 8005cce:	d50a      	bpl.n	8005ce6 <_printf_i+0xce>
 8005cd0:	6805      	ldr	r5, [r0, #0]
 8005cd2:	600b      	str	r3, [r1, #0]
 8005cd4:	2d00      	cmp	r5, #0
 8005cd6:	da03      	bge.n	8005ce0 <_printf_i+0xc8>
 8005cd8:	232d      	movs	r3, #45	; 0x2d
 8005cda:	426d      	negs	r5, r5
 8005cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ce0:	485e      	ldr	r0, [pc, #376]	; (8005e5c <_printf_i+0x244>)
 8005ce2:	230a      	movs	r3, #10
 8005ce4:	e019      	b.n	8005d1a <_printf_i+0x102>
 8005ce6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005cea:	6805      	ldr	r5, [r0, #0]
 8005cec:	600b      	str	r3, [r1, #0]
 8005cee:	bf18      	it	ne
 8005cf0:	b22d      	sxthne	r5, r5
 8005cf2:	e7ef      	b.n	8005cd4 <_printf_i+0xbc>
 8005cf4:	680b      	ldr	r3, [r1, #0]
 8005cf6:	6825      	ldr	r5, [r4, #0]
 8005cf8:	1d18      	adds	r0, r3, #4
 8005cfa:	6008      	str	r0, [r1, #0]
 8005cfc:	0628      	lsls	r0, r5, #24
 8005cfe:	d501      	bpl.n	8005d04 <_printf_i+0xec>
 8005d00:	681d      	ldr	r5, [r3, #0]
 8005d02:	e002      	b.n	8005d0a <_printf_i+0xf2>
 8005d04:	0669      	lsls	r1, r5, #25
 8005d06:	d5fb      	bpl.n	8005d00 <_printf_i+0xe8>
 8005d08:	881d      	ldrh	r5, [r3, #0]
 8005d0a:	4854      	ldr	r0, [pc, #336]	; (8005e5c <_printf_i+0x244>)
 8005d0c:	2f6f      	cmp	r7, #111	; 0x6f
 8005d0e:	bf0c      	ite	eq
 8005d10:	2308      	moveq	r3, #8
 8005d12:	230a      	movne	r3, #10
 8005d14:	2100      	movs	r1, #0
 8005d16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d1a:	6866      	ldr	r6, [r4, #4]
 8005d1c:	60a6      	str	r6, [r4, #8]
 8005d1e:	2e00      	cmp	r6, #0
 8005d20:	bfa2      	ittt	ge
 8005d22:	6821      	ldrge	r1, [r4, #0]
 8005d24:	f021 0104 	bicge.w	r1, r1, #4
 8005d28:	6021      	strge	r1, [r4, #0]
 8005d2a:	b90d      	cbnz	r5, 8005d30 <_printf_i+0x118>
 8005d2c:	2e00      	cmp	r6, #0
 8005d2e:	d04d      	beq.n	8005dcc <_printf_i+0x1b4>
 8005d30:	4616      	mov	r6, r2
 8005d32:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d36:	fb03 5711 	mls	r7, r3, r1, r5
 8005d3a:	5dc7      	ldrb	r7, [r0, r7]
 8005d3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d40:	462f      	mov	r7, r5
 8005d42:	42bb      	cmp	r3, r7
 8005d44:	460d      	mov	r5, r1
 8005d46:	d9f4      	bls.n	8005d32 <_printf_i+0x11a>
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d10b      	bne.n	8005d64 <_printf_i+0x14c>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	07df      	lsls	r7, r3, #31
 8005d50:	d508      	bpl.n	8005d64 <_printf_i+0x14c>
 8005d52:	6923      	ldr	r3, [r4, #16]
 8005d54:	6861      	ldr	r1, [r4, #4]
 8005d56:	4299      	cmp	r1, r3
 8005d58:	bfde      	ittt	le
 8005d5a:	2330      	movle	r3, #48	; 0x30
 8005d5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d64:	1b92      	subs	r2, r2, r6
 8005d66:	6122      	str	r2, [r4, #16]
 8005d68:	f8cd a000 	str.w	sl, [sp]
 8005d6c:	464b      	mov	r3, r9
 8005d6e:	aa03      	add	r2, sp, #12
 8005d70:	4621      	mov	r1, r4
 8005d72:	4640      	mov	r0, r8
 8005d74:	f7ff fee2 	bl	8005b3c <_printf_common>
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d14c      	bne.n	8005e16 <_printf_i+0x1fe>
 8005d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d80:	b004      	add	sp, #16
 8005d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d86:	4835      	ldr	r0, [pc, #212]	; (8005e5c <_printf_i+0x244>)
 8005d88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	680e      	ldr	r6, [r1, #0]
 8005d90:	061f      	lsls	r7, r3, #24
 8005d92:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d96:	600e      	str	r6, [r1, #0]
 8005d98:	d514      	bpl.n	8005dc4 <_printf_i+0x1ac>
 8005d9a:	07d9      	lsls	r1, r3, #31
 8005d9c:	bf44      	itt	mi
 8005d9e:	f043 0320 	orrmi.w	r3, r3, #32
 8005da2:	6023      	strmi	r3, [r4, #0]
 8005da4:	b91d      	cbnz	r5, 8005dae <_printf_i+0x196>
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	f023 0320 	bic.w	r3, r3, #32
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	2310      	movs	r3, #16
 8005db0:	e7b0      	b.n	8005d14 <_printf_i+0xfc>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	f043 0320 	orr.w	r3, r3, #32
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	2378      	movs	r3, #120	; 0x78
 8005dbc:	4828      	ldr	r0, [pc, #160]	; (8005e60 <_printf_i+0x248>)
 8005dbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dc2:	e7e3      	b.n	8005d8c <_printf_i+0x174>
 8005dc4:	065e      	lsls	r6, r3, #25
 8005dc6:	bf48      	it	mi
 8005dc8:	b2ad      	uxthmi	r5, r5
 8005dca:	e7e6      	b.n	8005d9a <_printf_i+0x182>
 8005dcc:	4616      	mov	r6, r2
 8005dce:	e7bb      	b.n	8005d48 <_printf_i+0x130>
 8005dd0:	680b      	ldr	r3, [r1, #0]
 8005dd2:	6826      	ldr	r6, [r4, #0]
 8005dd4:	6960      	ldr	r0, [r4, #20]
 8005dd6:	1d1d      	adds	r5, r3, #4
 8005dd8:	600d      	str	r5, [r1, #0]
 8005dda:	0635      	lsls	r5, r6, #24
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	d501      	bpl.n	8005de4 <_printf_i+0x1cc>
 8005de0:	6018      	str	r0, [r3, #0]
 8005de2:	e002      	b.n	8005dea <_printf_i+0x1d2>
 8005de4:	0671      	lsls	r1, r6, #25
 8005de6:	d5fb      	bpl.n	8005de0 <_printf_i+0x1c8>
 8005de8:	8018      	strh	r0, [r3, #0]
 8005dea:	2300      	movs	r3, #0
 8005dec:	6123      	str	r3, [r4, #16]
 8005dee:	4616      	mov	r6, r2
 8005df0:	e7ba      	b.n	8005d68 <_printf_i+0x150>
 8005df2:	680b      	ldr	r3, [r1, #0]
 8005df4:	1d1a      	adds	r2, r3, #4
 8005df6:	600a      	str	r2, [r1, #0]
 8005df8:	681e      	ldr	r6, [r3, #0]
 8005dfa:	6862      	ldr	r2, [r4, #4]
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	4630      	mov	r0, r6
 8005e00:	f7fa f9e6 	bl	80001d0 <memchr>
 8005e04:	b108      	cbz	r0, 8005e0a <_printf_i+0x1f2>
 8005e06:	1b80      	subs	r0, r0, r6
 8005e08:	6060      	str	r0, [r4, #4]
 8005e0a:	6863      	ldr	r3, [r4, #4]
 8005e0c:	6123      	str	r3, [r4, #16]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e14:	e7a8      	b.n	8005d68 <_printf_i+0x150>
 8005e16:	6923      	ldr	r3, [r4, #16]
 8005e18:	4632      	mov	r2, r6
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	4640      	mov	r0, r8
 8005e1e:	47d0      	blx	sl
 8005e20:	3001      	adds	r0, #1
 8005e22:	d0ab      	beq.n	8005d7c <_printf_i+0x164>
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	079b      	lsls	r3, r3, #30
 8005e28:	d413      	bmi.n	8005e52 <_printf_i+0x23a>
 8005e2a:	68e0      	ldr	r0, [r4, #12]
 8005e2c:	9b03      	ldr	r3, [sp, #12]
 8005e2e:	4298      	cmp	r0, r3
 8005e30:	bfb8      	it	lt
 8005e32:	4618      	movlt	r0, r3
 8005e34:	e7a4      	b.n	8005d80 <_printf_i+0x168>
 8005e36:	2301      	movs	r3, #1
 8005e38:	4632      	mov	r2, r6
 8005e3a:	4649      	mov	r1, r9
 8005e3c:	4640      	mov	r0, r8
 8005e3e:	47d0      	blx	sl
 8005e40:	3001      	adds	r0, #1
 8005e42:	d09b      	beq.n	8005d7c <_printf_i+0x164>
 8005e44:	3501      	adds	r5, #1
 8005e46:	68e3      	ldr	r3, [r4, #12]
 8005e48:	9903      	ldr	r1, [sp, #12]
 8005e4a:	1a5b      	subs	r3, r3, r1
 8005e4c:	42ab      	cmp	r3, r5
 8005e4e:	dcf2      	bgt.n	8005e36 <_printf_i+0x21e>
 8005e50:	e7eb      	b.n	8005e2a <_printf_i+0x212>
 8005e52:	2500      	movs	r5, #0
 8005e54:	f104 0619 	add.w	r6, r4, #25
 8005e58:	e7f5      	b.n	8005e46 <_printf_i+0x22e>
 8005e5a:	bf00      	nop
 8005e5c:	08006119 	.word	0x08006119
 8005e60:	0800612a 	.word	0x0800612a

08005e64 <memcpy>:
 8005e64:	440a      	add	r2, r1
 8005e66:	4291      	cmp	r1, r2
 8005e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e6c:	d100      	bne.n	8005e70 <memcpy+0xc>
 8005e6e:	4770      	bx	lr
 8005e70:	b510      	push	{r4, lr}
 8005e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e7a:	4291      	cmp	r1, r2
 8005e7c:	d1f9      	bne.n	8005e72 <memcpy+0xe>
 8005e7e:	bd10      	pop	{r4, pc}

08005e80 <memmove>:
 8005e80:	4288      	cmp	r0, r1
 8005e82:	b510      	push	{r4, lr}
 8005e84:	eb01 0402 	add.w	r4, r1, r2
 8005e88:	d902      	bls.n	8005e90 <memmove+0x10>
 8005e8a:	4284      	cmp	r4, r0
 8005e8c:	4623      	mov	r3, r4
 8005e8e:	d807      	bhi.n	8005ea0 <memmove+0x20>
 8005e90:	1e43      	subs	r3, r0, #1
 8005e92:	42a1      	cmp	r1, r4
 8005e94:	d008      	beq.n	8005ea8 <memmove+0x28>
 8005e96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e9e:	e7f8      	b.n	8005e92 <memmove+0x12>
 8005ea0:	4402      	add	r2, r0
 8005ea2:	4601      	mov	r1, r0
 8005ea4:	428a      	cmp	r2, r1
 8005ea6:	d100      	bne.n	8005eaa <memmove+0x2a>
 8005ea8:	bd10      	pop	{r4, pc}
 8005eaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005eae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005eb2:	e7f7      	b.n	8005ea4 <memmove+0x24>

08005eb4 <_free_r>:
 8005eb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005eb6:	2900      	cmp	r1, #0
 8005eb8:	d048      	beq.n	8005f4c <_free_r+0x98>
 8005eba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ebe:	9001      	str	r0, [sp, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f1a1 0404 	sub.w	r4, r1, #4
 8005ec6:	bfb8      	it	lt
 8005ec8:	18e4      	addlt	r4, r4, r3
 8005eca:	f000 f8d3 	bl	8006074 <__malloc_lock>
 8005ece:	4a20      	ldr	r2, [pc, #128]	; (8005f50 <_free_r+0x9c>)
 8005ed0:	9801      	ldr	r0, [sp, #4]
 8005ed2:	6813      	ldr	r3, [r2, #0]
 8005ed4:	4615      	mov	r5, r2
 8005ed6:	b933      	cbnz	r3, 8005ee6 <_free_r+0x32>
 8005ed8:	6063      	str	r3, [r4, #4]
 8005eda:	6014      	str	r4, [r2, #0]
 8005edc:	b003      	add	sp, #12
 8005ede:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ee2:	f000 b8cd 	b.w	8006080 <__malloc_unlock>
 8005ee6:	42a3      	cmp	r3, r4
 8005ee8:	d90b      	bls.n	8005f02 <_free_r+0x4e>
 8005eea:	6821      	ldr	r1, [r4, #0]
 8005eec:	1862      	adds	r2, r4, r1
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	bf04      	itt	eq
 8005ef2:	681a      	ldreq	r2, [r3, #0]
 8005ef4:	685b      	ldreq	r3, [r3, #4]
 8005ef6:	6063      	str	r3, [r4, #4]
 8005ef8:	bf04      	itt	eq
 8005efa:	1852      	addeq	r2, r2, r1
 8005efc:	6022      	streq	r2, [r4, #0]
 8005efe:	602c      	str	r4, [r5, #0]
 8005f00:	e7ec      	b.n	8005edc <_free_r+0x28>
 8005f02:	461a      	mov	r2, r3
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	b10b      	cbz	r3, 8005f0c <_free_r+0x58>
 8005f08:	42a3      	cmp	r3, r4
 8005f0a:	d9fa      	bls.n	8005f02 <_free_r+0x4e>
 8005f0c:	6811      	ldr	r1, [r2, #0]
 8005f0e:	1855      	adds	r5, r2, r1
 8005f10:	42a5      	cmp	r5, r4
 8005f12:	d10b      	bne.n	8005f2c <_free_r+0x78>
 8005f14:	6824      	ldr	r4, [r4, #0]
 8005f16:	4421      	add	r1, r4
 8005f18:	1854      	adds	r4, r2, r1
 8005f1a:	42a3      	cmp	r3, r4
 8005f1c:	6011      	str	r1, [r2, #0]
 8005f1e:	d1dd      	bne.n	8005edc <_free_r+0x28>
 8005f20:	681c      	ldr	r4, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	6053      	str	r3, [r2, #4]
 8005f26:	4421      	add	r1, r4
 8005f28:	6011      	str	r1, [r2, #0]
 8005f2a:	e7d7      	b.n	8005edc <_free_r+0x28>
 8005f2c:	d902      	bls.n	8005f34 <_free_r+0x80>
 8005f2e:	230c      	movs	r3, #12
 8005f30:	6003      	str	r3, [r0, #0]
 8005f32:	e7d3      	b.n	8005edc <_free_r+0x28>
 8005f34:	6825      	ldr	r5, [r4, #0]
 8005f36:	1961      	adds	r1, r4, r5
 8005f38:	428b      	cmp	r3, r1
 8005f3a:	bf04      	itt	eq
 8005f3c:	6819      	ldreq	r1, [r3, #0]
 8005f3e:	685b      	ldreq	r3, [r3, #4]
 8005f40:	6063      	str	r3, [r4, #4]
 8005f42:	bf04      	itt	eq
 8005f44:	1949      	addeq	r1, r1, r5
 8005f46:	6021      	streq	r1, [r4, #0]
 8005f48:	6054      	str	r4, [r2, #4]
 8005f4a:	e7c7      	b.n	8005edc <_free_r+0x28>
 8005f4c:	b003      	add	sp, #12
 8005f4e:	bd30      	pop	{r4, r5, pc}
 8005f50:	200000dc 	.word	0x200000dc

08005f54 <_malloc_r>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	1ccd      	adds	r5, r1, #3
 8005f58:	f025 0503 	bic.w	r5, r5, #3
 8005f5c:	3508      	adds	r5, #8
 8005f5e:	2d0c      	cmp	r5, #12
 8005f60:	bf38      	it	cc
 8005f62:	250c      	movcc	r5, #12
 8005f64:	2d00      	cmp	r5, #0
 8005f66:	4606      	mov	r6, r0
 8005f68:	db01      	blt.n	8005f6e <_malloc_r+0x1a>
 8005f6a:	42a9      	cmp	r1, r5
 8005f6c:	d903      	bls.n	8005f76 <_malloc_r+0x22>
 8005f6e:	230c      	movs	r3, #12
 8005f70:	6033      	str	r3, [r6, #0]
 8005f72:	2000      	movs	r0, #0
 8005f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f76:	f000 f87d 	bl	8006074 <__malloc_lock>
 8005f7a:	4921      	ldr	r1, [pc, #132]	; (8006000 <_malloc_r+0xac>)
 8005f7c:	680a      	ldr	r2, [r1, #0]
 8005f7e:	4614      	mov	r4, r2
 8005f80:	b99c      	cbnz	r4, 8005faa <_malloc_r+0x56>
 8005f82:	4f20      	ldr	r7, [pc, #128]	; (8006004 <_malloc_r+0xb0>)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	b923      	cbnz	r3, 8005f92 <_malloc_r+0x3e>
 8005f88:	4621      	mov	r1, r4
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	f000 f862 	bl	8006054 <_sbrk_r>
 8005f90:	6038      	str	r0, [r7, #0]
 8005f92:	4629      	mov	r1, r5
 8005f94:	4630      	mov	r0, r6
 8005f96:	f000 f85d 	bl	8006054 <_sbrk_r>
 8005f9a:	1c43      	adds	r3, r0, #1
 8005f9c:	d123      	bne.n	8005fe6 <_malloc_r+0x92>
 8005f9e:	230c      	movs	r3, #12
 8005fa0:	6033      	str	r3, [r6, #0]
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f000 f86c 	bl	8006080 <__malloc_unlock>
 8005fa8:	e7e3      	b.n	8005f72 <_malloc_r+0x1e>
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	1b5b      	subs	r3, r3, r5
 8005fae:	d417      	bmi.n	8005fe0 <_malloc_r+0x8c>
 8005fb0:	2b0b      	cmp	r3, #11
 8005fb2:	d903      	bls.n	8005fbc <_malloc_r+0x68>
 8005fb4:	6023      	str	r3, [r4, #0]
 8005fb6:	441c      	add	r4, r3
 8005fb8:	6025      	str	r5, [r4, #0]
 8005fba:	e004      	b.n	8005fc6 <_malloc_r+0x72>
 8005fbc:	6863      	ldr	r3, [r4, #4]
 8005fbe:	42a2      	cmp	r2, r4
 8005fc0:	bf0c      	ite	eq
 8005fc2:	600b      	streq	r3, [r1, #0]
 8005fc4:	6053      	strne	r3, [r2, #4]
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	f000 f85a 	bl	8006080 <__malloc_unlock>
 8005fcc:	f104 000b 	add.w	r0, r4, #11
 8005fd0:	1d23      	adds	r3, r4, #4
 8005fd2:	f020 0007 	bic.w	r0, r0, #7
 8005fd6:	1ac2      	subs	r2, r0, r3
 8005fd8:	d0cc      	beq.n	8005f74 <_malloc_r+0x20>
 8005fda:	1a1b      	subs	r3, r3, r0
 8005fdc:	50a3      	str	r3, [r4, r2]
 8005fde:	e7c9      	b.n	8005f74 <_malloc_r+0x20>
 8005fe0:	4622      	mov	r2, r4
 8005fe2:	6864      	ldr	r4, [r4, #4]
 8005fe4:	e7cc      	b.n	8005f80 <_malloc_r+0x2c>
 8005fe6:	1cc4      	adds	r4, r0, #3
 8005fe8:	f024 0403 	bic.w	r4, r4, #3
 8005fec:	42a0      	cmp	r0, r4
 8005fee:	d0e3      	beq.n	8005fb8 <_malloc_r+0x64>
 8005ff0:	1a21      	subs	r1, r4, r0
 8005ff2:	4630      	mov	r0, r6
 8005ff4:	f000 f82e 	bl	8006054 <_sbrk_r>
 8005ff8:	3001      	adds	r0, #1
 8005ffa:	d1dd      	bne.n	8005fb8 <_malloc_r+0x64>
 8005ffc:	e7cf      	b.n	8005f9e <_malloc_r+0x4a>
 8005ffe:	bf00      	nop
 8006000:	200000dc 	.word	0x200000dc
 8006004:	200000e0 	.word	0x200000e0

08006008 <_realloc_r>:
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	4607      	mov	r7, r0
 800600c:	4614      	mov	r4, r2
 800600e:	460e      	mov	r6, r1
 8006010:	b921      	cbnz	r1, 800601c <_realloc_r+0x14>
 8006012:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006016:	4611      	mov	r1, r2
 8006018:	f7ff bf9c 	b.w	8005f54 <_malloc_r>
 800601c:	b922      	cbnz	r2, 8006028 <_realloc_r+0x20>
 800601e:	f7ff ff49 	bl	8005eb4 <_free_r>
 8006022:	4625      	mov	r5, r4
 8006024:	4628      	mov	r0, r5
 8006026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006028:	f000 f830 	bl	800608c <_malloc_usable_size_r>
 800602c:	42a0      	cmp	r0, r4
 800602e:	d20f      	bcs.n	8006050 <_realloc_r+0x48>
 8006030:	4621      	mov	r1, r4
 8006032:	4638      	mov	r0, r7
 8006034:	f7ff ff8e 	bl	8005f54 <_malloc_r>
 8006038:	4605      	mov	r5, r0
 800603a:	2800      	cmp	r0, #0
 800603c:	d0f2      	beq.n	8006024 <_realloc_r+0x1c>
 800603e:	4631      	mov	r1, r6
 8006040:	4622      	mov	r2, r4
 8006042:	f7ff ff0f 	bl	8005e64 <memcpy>
 8006046:	4631      	mov	r1, r6
 8006048:	4638      	mov	r0, r7
 800604a:	f7ff ff33 	bl	8005eb4 <_free_r>
 800604e:	e7e9      	b.n	8006024 <_realloc_r+0x1c>
 8006050:	4635      	mov	r5, r6
 8006052:	e7e7      	b.n	8006024 <_realloc_r+0x1c>

08006054 <_sbrk_r>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	4d06      	ldr	r5, [pc, #24]	; (8006070 <_sbrk_r+0x1c>)
 8006058:	2300      	movs	r3, #0
 800605a:	4604      	mov	r4, r0
 800605c:	4608      	mov	r0, r1
 800605e:	602b      	str	r3, [r5, #0]
 8006060:	f7fb fb54 	bl	800170c <_sbrk>
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	d102      	bne.n	800606e <_sbrk_r+0x1a>
 8006068:	682b      	ldr	r3, [r5, #0]
 800606a:	b103      	cbz	r3, 800606e <_sbrk_r+0x1a>
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	bd38      	pop	{r3, r4, r5, pc}
 8006070:	20000250 	.word	0x20000250

08006074 <__malloc_lock>:
 8006074:	4801      	ldr	r0, [pc, #4]	; (800607c <__malloc_lock+0x8>)
 8006076:	f000 b811 	b.w	800609c <__retarget_lock_acquire_recursive>
 800607a:	bf00      	nop
 800607c:	20000258 	.word	0x20000258

08006080 <__malloc_unlock>:
 8006080:	4801      	ldr	r0, [pc, #4]	; (8006088 <__malloc_unlock+0x8>)
 8006082:	f000 b80c 	b.w	800609e <__retarget_lock_release_recursive>
 8006086:	bf00      	nop
 8006088:	20000258 	.word	0x20000258

0800608c <_malloc_usable_size_r>:
 800608c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006090:	1f18      	subs	r0, r3, #4
 8006092:	2b00      	cmp	r3, #0
 8006094:	bfbc      	itt	lt
 8006096:	580b      	ldrlt	r3, [r1, r0]
 8006098:	18c0      	addlt	r0, r0, r3
 800609a:	4770      	bx	lr

0800609c <__retarget_lock_acquire_recursive>:
 800609c:	4770      	bx	lr

0800609e <__retarget_lock_release_recursive>:
 800609e:	4770      	bx	lr

080060a0 <_init>:
 80060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a2:	bf00      	nop
 80060a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a6:	bc08      	pop	{r3}
 80060a8:	469e      	mov	lr, r3
 80060aa:	4770      	bx	lr

080060ac <_fini>:
 80060ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ae:	bf00      	nop
 80060b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b2:	bc08      	pop	{r3}
 80060b4:	469e      	mov	lr, r3
 80060b6:	4770      	bx	lr
